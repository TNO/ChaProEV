# Created by Omar Usmai (Omar.Usmani@TNO.nl).
# This file contains configuration parameters for running a
# ChaProEV scenario. To add a new scenario, copy one of the existing files
# in this folder (scenarios), and add/remove/modify paramters as
# required, including the first parameter below, which is the scenario name,
# which should be the same as the file name (it might work with another name,
# but this is not tested and there is no reason to have different names for the
# same scenario).
scenario = 'baseline'

# This is a case name, which is the grouping of all your scenarios.
# This is principally used to label your output files.
case_name = 'local_impact_BEVs'

scenario_parameter_categories = ['locations', 'legs', 'vehicles', 'trips']

[unit_conversions]
JOULES_IN_A_KWH = 3.6e6

# File-related parameters
[files]
# General parameters
input_folder = 'input'
output_folder = 'output'
# For files that group data (such as (sqlite) databases or Excel workbooks)
groupfile_root = 'ChaProEV'

[files.figures]
# Parameters for plots/figures
dpi = 240
# Indicate below if you want to save your (Matplotlib) figures
# In the given formats, and the dpi you want to use (common for all)
[files.figures.outputs]
png = true
pdf = true
svg = true
eps = true


# Indicate below if you want to save your Pandas DataFrames in the
# listed formats (put a true if you want to do so, false if you don't)
[files.dataframe_outputs]
csv = true
json = true
html = true
latex = true
xml = false
clipboard = true  # This saves the file to the local clipboard
excel = true
hdf = true
feather = true
parquet = true
stata = true
pickle = true
sql = true

# Defining custome colors with the RGB values
[colors]
kraken_deep_sea_blue = [0, 22, 40]
kraken_ice_blue = [153, 217, 217]
kraken_boundless_blue = [53, 84, 100]
kraken_shadow_blue = [104, 162, 185]
kraken_red_alert = [233, 7, 43]
Mopo_darkest = [10, 10, 70]
Mopo_dark = [9, 9, 124]
Mopo_light = [0, 88, 143]
Mopo_lightest = [102, 177, 206]

# Defining color bars with lists of colors they use
[color_bars]
kraken = [
    'kraken_deep_sea_blue', 'kraken_boundless_blue',
    'kraken_shadow_blue', 'kraken_ice_blue']
Mopo_to_light = ['Mopo_darkest', 'Mopo_dark', 'Mopo_light', 'Mopo_lightest']
Mopo_to_dark = ['Mopo_lightest', 'Mopo_light', 'Mopo_dark', 'Mopo_darkest']


# time-related parameters/constants
[time]
SECONDS_PER_HOUR = 3600
HOURS_IN_A_DAY = 24
MONTHS_IN_A_YEAR = 12
MAX_DAYS_IN_A_MONTH = 31
DAYS_IN_A_YEAR = 365.25
DAYS_IN_A_WEEK = 7
weekend_day_numbers = [6, 7]
first_hour_number = 1
# Put 0 if you start counting at 0, 1 if you start counting at 1
# The SPINE toolbox uses 1
# This is only for the hour number list (and related lists)


# Run parameters
[run]
weather_factors_table_root_name = 'weather_factors'
[run.get_extra_downloads]
download_weather_data = false
# Put true if you want to download the weather data. In principle,
# you only to do this once, unless you add years and/or areas
make_weather_database = false
# Put true if you want to remake the weather database. In principle,
# you only to do this once, unless you add years and/or areas. Note
# that this refers to other years ans areas than the weather download.
download_EV_tool_data = false
# Put true if you want to download the data from the EV tool by geootab
# This should only be needed once and is independentr of the case

[run.start]
year = 2020
month = 5
day = 8
hour = 8
minute = 0
[run.end]
year = 2020
month = 6
day = 26
hour = 18
minute = 0
[run.frequency]
size = 1  # Put the size of the interval here
type = 'H'  # 'min'
# Put the interval type here, use 'H' for hours, 'min' for minutes,
# 'S' for seconds, 'D' for days. For more info and other types, see here:
# https://pandas.pydata.org/docs/user_guide/timeseries.html#timeseries-offset-aliases

[transport_factors]
road_types = ['highway', 'city']


[locations]
# Add locations following the syntax below:
# [location.code] <--use the the code/alias you want for the location
# and put the desired properties below
[locations.home]
connectivity = 1
charging_power = 8.9  # kW
charger_efficiency = 0.85
latitude = 52
longitude = 6.2
base_charging_price = 0.25  # €/kWh
charging_desirability = 1
# An indicator (0-1) of how much people like to charge at this location
[locations.work]
connectivity = 0.25
charging_power = 11  # kW
charger_efficiency = 0.85
latitude = 52.1
longitude = 5.8
base_charging_price = 0  # €/kWh
charging_desirability = 1
# An indicator (0-1) of how much people like to charge at this location
[locations.leisure]
connectivity = 0.25
charging_power = 22  # kW
charger_efficiency = 0.85
latitude = 52.1
longitude = 6.2
base_charging_price = 0.35  # €/kWh
charging_desirability = 0.25
# An indicator (0-1) of how much people like to charge at this location
[locations.weekend]
connectivity = 0.1
charging_power = 22  # kW
charger_efficiency = 0.85
latitude = 51.8
longitude = 6.2
base_charging_price = 0.35  # €/kWh
charging_desirability = 0.1
# An indicator (0-1) of how much people like to charge at this location
[locations.holidays]
connectivity = 0.1
charging_power = 22  # kW
charger_efficiency = 0.85
latitude = 53.0
longitude = 6.2
base_charging_price = 0.35  # €/kWh
charging_desirability = 0.2
# An indicator (0-1) of how much people like to charge at this location

[legs]
# You can add legs here by copying existing legs,
# changing the name of the leg (in [legs.go_to_work], go_to_work is
# the name of the leg) and changing the relevant values
# Note that you need to change the leg name in all parts where it occurs
# (i.e. also in [legs.go_to_work.locations],[legs.go_to_work.road_types],
# etc.
[legs.go_to_work]
distance = 22  # km
duration = 0.25  # hours
# This factor adds a correction to the vehicle consumption that depends
# on the hour in day (the first is for 00:00 to 00:59,
# the last for 23:00 to 23:59). Note that these are actual hours,
# not hours in the user day (which can start and end at other moments than
# midnight). This is used to take into account things like traffic jams.
# The default value is 1.
hour_in_day_factors = [
    1, 1, 1, 1, 1, 1, 1, 1,
    1.2, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1
]
[legs.go_to_work.locations]
start = 'home'
end = 'work'
[legs.go_to_work.road_type_mix]
# Give the road type mix
# We need a value for each of the road_types (see above in [transport_factors])
# If the road type does not occur in the leg, simply put 0
# Note that the total should be 1 (there are not checks to ensure this,
# so you need to make sure you do this correctly)
city = 0.8
highway = 0.2


[legs.come_from_work]
distance = 22  # km
duration = 0.25  # hours
# This factor adds a correction to the vehicle consumption that depends
# on the hour in day (the first is for 00:00 to 00:59,
# the last for 23:00 to 23:59). Note that these are actual hours,
# not hours in the user day (which can start and end at other moments than
# midnight). This is used to take into account things like traffic jams.
# The default value is 1.
hour_in_day_factors = [
    1, 1, 1, 1, 1, 1, 1, 1,
    1.2, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1
]
[legs.come_from_work.locations]
start = 'work'
end = 'home'
[legs.come_from_work.road_type_mix]
# Give the road type mix
# We need a value for each of the road_types (see above in [transport_factors])
# If the road type does not occur in the leg, simply put 0
# Note that the total should be 1 (there are not checks to ensure this,
# so you need to make sure you do this correctly)
city = 0.8
highway = 0.2


[legs.home_to_leisure]
distance = 6  # km
duration = 0.15  # hours
# This factor adds a correction to the vehicle consumption that depends
# on the hour in day (the first is for 00:00 to 00:59,
# the last for 23:00 to 23:59). Note that these are actual hours,
# not hours in the user day (which can start and end at other moments than
# midnight). This is used to take into account things like traffic jams.
# The default value is 1.
hour_in_day_factors = [
    1, 1, 1, 1, 1, 1, 1, 1,
    1.2, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1
]
[legs.home_to_leisure.locations]
start = 'home'
end = 'leisure'
[legs.home_to_leisure.road_type_mix]
# Give the road type mix
# We need a value for each of the road_types (see above in [transport_factors])
# If the road type does not occur in the leg, simply put 0
# Note that the total should be 1 (there are not checks to ensure this,
# so you need to make sure you do this correctly)
city = 0.8
highway = 0.2


[legs.leisure_to_home]
distance = 6  # km
duration = 0.15  # hours
# This factor adds a correction to the vehicle consumption that depends
# on the hour in day (the first is for 00:00 to 00:59,
# the last for 23:00 to 23:59). Note that these are actual hours,
# not hours in the user day (which can start and end at other moments than
# midnight). This is used to take into account things like traffic jams.
# The default value is 1.
hour_in_day_factors = [
    1, 1, 1, 1, 1, 1, 1, 1,
    1.2, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1
]
[legs.leisure_to_home.locations]
start = 'leisure'
end = 'home'
[legs.leisure_to_home.road_type_mix]
# Give the road type mix
# We need a value for each of the road_types (see above in [transport_factors])
# If the road type does not occur in the leg, simply put 0
# Note that the total should be 1 (there are not checks to ensure this,
# so you need to make sure you do this correctly)
city = 0.8
highway = 0.2


[legs.home_to_weekend]
distance = 6  # km
duration = 0.15  # hours
# This factor adds a correction to the vehicle consumption that depends
# on the hour in day (the first is for 00:00 to 00:59,
# the last for 23:00 to 23:59). Note that these are actual hours,
# not hours in the user day (which can start and end at other moments than
# midnight). This is used to take into account things like traffic jams.
# The default value is 1.
hour_in_day_factors = [
    1, 1, 1, 1, 1, 1, 1, 1,
    1.2, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1
]
[legs.home_to_weekend.locations]
start = 'home'
end = 'weekend'
[legs.home_to_weekend.road_type_mix]
# Give the road type mix
# We need a value for each of the road_types (see above in [transport_factors])
# If the road type does not occur in the leg, simply put 0
# Note that the total should be 1 (there are not checks to ensure this,
# so you need to make sure you do this correctly)
city = 0.8
highway = 0.2


[legs.weekend_to_home]
distance = 6  # km
duration = 0.15  # hours
# This factor adds a correction to the vehicle consumption that depends
# on the hour in day (the first is for 00:00 to 00:59,
# the last for 23:00 to 23:59). Note that these are actual hours,
# not hours in the user day (which can start and end at other moments than
# midnight). This is used to take into account things like traffic jams.
# The default value is 1.
hour_in_day_factors = [
    1, 1, 1, 1, 1, 1, 1, 1,
    1.2, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1
]
[legs.weekend_to_home.locations]
start = 'weekend'
end = 'home'
[legs.weekend_to_home.road_type_mix]
# Give the road type mix
# We need a value for each of the road_types (see above in [transport_factors])
# If the road type does not occur in the leg, simply put 0
# Note that the total should be 1 (there are not checks to ensure this,
# so you need to make sure you do this correctly)
city = 0.8
highway = 0.2

[legs.home_to_holiday]
distance = 6  # km
duration = 0.15  # hours
# This factor adds a correction to the vehicle consumption that depends
# on the hour in day (the first is for 00:00 to 00:59,
# the last for 23:00 to 23:59). Note that these are actual hours,
# not hours in the user day (which can start and end at other moments than
# midnight). This is used to take into account things like traffic jams.
# The default value is 1.
hour_in_day_factors = [
    1, 1, 1, 1, 1, 1, 1, 1,
    1.2, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1
]
[legs.home_to_holiday.locations]
start = 'home'
end = 'holiday'
[legs.home_to_holiday.road_type_mix]
# Give the road type mix
# We need a value for each of the road_types (see above in [transport_factors])
# If the road type does not occur in the leg, simply put 0
# Note that the total should be 1 (there are not checks to ensure this,
# so you need to make sure you do this correctly)
city = 0.8
highway = 0.2


[legs.holiday_to_home]
distance = 6  # km
duration = 0.15  # hours
# This factor adds a correction to the vehicle consumption that depends
# on the hour in day (the first is for 00:00 to 00:59,
# the last for 23:00 to 23:59). Note that these are actual hours,
# not hours in the user day (which can start and end at other moments than
# midnight). This is used to take into account things like traffic jams.
# The default value is 1.
hour_in_day_factors = [
    1, 1, 1, 1, 1, 1, 1, 1,
    1.2, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1
]
[legs.holiday_to_home.locations]
start = 'holiday'
end = 'home'
[legs.holiday_to_home.road_type_mix]
# Give the road type mix
# We need a value for each of the road_types (see above in [transport_factors])
# If the road type does not occur in the leg, simply put 0
# Note that the total should be 1 (there are not checks to ensure this,
# so you need to make sure you do this correctly)
city = 0.8
highway = 0.2

[vehicles]

[vehicles.car]
base_consumption = 0.2  # kWh/km
battery_capacity = 80  # kWh
solar_panel_size_kWp = 0  # kWp


[vehicles.car.road_factors]
# These road factors mutliply the consumption
# We need a value for each of the road_types (see above in [transport_factors])
# The default value (if nothing changes) is 1.
highway = 1.2
city = 1

[trips]
[trips.commute_to_work]
vehicle = 'car'
day_start_hour = 6
legs = ['go_to_work', 'come_from_work']
percentage_station_users = 0
start_probabilities = [
    0, 0, 0, 0, 0, 0, 0, 0.25,
    1, 0.25, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0
]
starting_location = 'home'

[trips.commute_to_work_and_leisure]
vehicle = 'car'
day_start_hour = 6
legs = ['go_to_work', 'come_from_work', 'home_to_leisure', 'leisure_to_home']
percentage_station_users = 0
start_probabilities = [
    0, 0, 0, 0, 0, 0, 0, 0.25,
    1, 0.25, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0
]
starting_location = 'home'

[trips.leisure_only]
vehicle = 'car'
day_start_hour = 6
legs = ['home_to_leisure', 'leisure_to_home']
percentage_station_users = 0
start_probabilities = [
   0.083333333, 0.083333333, 0.083333333, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625,
   0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0,
   0, 0, 0, 0, 0, 0, 0, 0
]
starting_location = 'home'

[trips.weekend_trip]
vehicle = 'car'
day_start_hour = 6
legs = ['home_to_weekend', 'weekend_to_home']
percentage_station_users = 0
start_probabilities = [
   0.083333333, 0.083333333, 0.083333333, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625,
   0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0,
   0, 0, 0, 0, 0, 0, 0, 0
]
starting_location = 'home'

[trips.holiday_outward]
vehicle = 'car'
day_start_hour = 6
legs = ['home_to_holiday']
percentage_station_users = 0
start_probabilities = [
   0.03125, 0.03125, 0.03125, 0.09375, 0.09375, 0.09375, 0.09375, 0.09375,
   0.09375, 0.09375, 0.09375, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125,
   0, 0, 0, 0, 0, 0, 0, 0
]
starting_location = 'home'


[trips.holiday_back]
vehicle = 'car'
day_start_hour = 6
legs = ['holiday_to_home']
percentage_station_users = 0
start_probabilities = [
   0.03125, 0.03125, 0.03125, 0.09375, 0.09375, 0.09375, 0.09375, 0.09375,
   0.09375, 0.09375, 0.09375, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125,
   0, 0, 0, 0, 0, 0, 0, 0
]
starting_location = 'holiday'

[trips.stay_put_home]
vehicle = 'car'
day_start_hour = 6
legs = []
percentage_station_users = 0
start_probabilities = [
   0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0
]
starting_location = 'home'


[trips.stay_put_holiday]
vehicle = 'car'
day_start_hour = 6
legs = []
percentage_station_users = 0
start_probabilities = [
   0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0
]
starting_location = 'holiday'

# Weather-related parameters
[weather]

# These parameters define what we want to get from the source
# (CDS ERA-5)
[weather.source_data]
start_year = 2020
end_year = 2022
quantities = [
    '2m_temperature',
    'skin_temperature',
    'surface_solar_radiation_downwards',
    'total_precipitation',
]
raw_data_folder = 'input/cds_weather_data'
# The following define the area over which the raw weather data will be
# downloaded. The corresponding in the processed weather database is below.
latitude_min = 36
latitude_max = 68
longitude_min = -11
longitude_max = 60

# Those parameters are used to processed the raw weather data into
# data useful for the model.
[weather.processed_data]
raw_data_folder = 'input/cds_weather_data'
processed_folder = 'input/processed_weather_data'
weather_database_file_name = 'weather.sqlite3'
# This parameter is there to avoid issues when writing a too large DataFrame
# at once (instead, we split it into chunks).
chunk_size = 100000
quantities = [
    '2m_temperature',
    'skin_temperature',
    'surface_solar_radiation_downwards',
    'total_precipitation',
]


KELVIN_TO_CELSIUS = -273.15
quantity_tags = ['t2m', 'skt', 'ssrd', 'tp']

quantity_processed_names = [
    'Temperature at 2 meters (°C)',
    'Skin temperature (°C)',
    'Surface solar radiation downwards (J/m2)',
    'Total precipitation (m)'
]

cumulative_quantity_processed_names = [
    'Surface solar radiation downwards (J/m2)',
    'Total precipitation (m)'
]

cumulative_quantities = [
    'surface_solar_radiation_downwards',
    'total_precipitation',
]

queries_for_cumulative_quantities = [
    "SELECT * FROM 'Surface solar radiation downwards (J/m2)';",
    "SELECT * FROM 'Total precipitation (m)';"
]

temperature_quantities = ['2m_temperature', 'skin_temperature']

processed_index_tags = ['Timetag', 'Latitude', 'Longitude']
# These define the area of the processed data in the weather database
latitude_min = 50.6
latitude_max = 53.5
longitude_min = 3.4
longitude_max = 7.2
coordinate_step = 0.1

# Parameters for the EV tool data from geotab
[weather.EV_tool]
EV_tool_url = 'https://www.geotab.com/CMS-GeneralFiles-production/NA/EV/EVTOOL.html'
user_agent = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.57'
efficiency_curve_script_index = 2
data_splitter = 'Temp:'
file_name = 'vehicle_temperature_efficiencies'
groupfile_name = 'vehicle_temperature_efficiencies'
folder = 'input'
efficiency_factor_column_name = 'Vehicle Relative efficiency factor'

# Temperature efficiency fit factors
[weather.vehicle_temperature_efficiencies]
folder = 'input'
file_name = 'vehicle_temperature_efficiencies.pkl'
fitting_polynomial_order = 6


# Parameters for plots (colors, sizes, etc.)
[plots]
[plots.vehicle_temperature_efficiency]
style = 'fivethirtyeight'
source_data_folder = 'input'
source_data_file = 'vehicle_temperature_efficiencies.pkl'
fit_color = 'kraken_ice_blue'
fit_line_size = 1
geotab_data_color = 'kraken_deep_sea_blue'
geotab_data_size = 8
title_size = 14

# These parameters are used for the ChaProEV mobility module
[mobility_module]
day_types = [
    'weekday_in_work_week', 'weekend_in_work_week',
    'weekday_in_holiday_week', 'weekend_in_holiday_week',
]
day_start_hour = 6

holiday_weeks = [1, 8, 18, 28, 29, 30, 31, 32, 42, 52, 53]
# We need to provide the number of holliday weeks seprately,
# as counting the elements of the list above might not work, such as
# when the above list contains weeks 1 and 53 (which just represent
# the fact that years don't necessarily start and/or end at the start/end
# of a week).
number_of_holiday_weeks = 10

time_spent_at_work = 9  # hours
work_hours_in_a_work_day = 8  # hours
hours_worked_per_work_week = 31	  # hours
hours_in_a_standard_work_week = 40  # hours
percentage_working_on_a_work_week = 1
worked_hours_per_year = 1434  # hours

leisure_trips_per_weekend = 1
leisure_trips_per_week_outside_weekends = 2
maximal_fill_percentage_leisure_trips_on_non_work_weekdays = 1
weekday_leisure_trips = 2
percentage_of_weekday_leisure_trips_on_a_work_day = 0.5
time_at_home_before_going_to_leisure_on_work_day = 2  # hours
time_spent_at_leisure_on_work_days = 3  # hours
time_spent_at_leisure_on_non_work_days = 2  # hours

weekend_trips_per_year = 12
time_spent_at_weekend_destination = 4  # hours

holiday_trips_taken = 2
time_spent_at_holiday_destination = 14  # days
percentage_of_outward_holiday_trips_on_weekends = 0.75
percentage_of_back_holiday_trips_on_weekends = 0.75


[maps]
map_data_folder = 'input/map_data'
area_data_file_name = 'NUTS_RG_01M_2021_3857_LEVL_3.json'
general_exclusion_codes = [
 'ES703', 'ES704', 'ES705', 'ES706', 'ES707', 'ES708', 'ES709',
 'PT200', 'PT300',
 'FRY10', 'FRY20', 'FRY30', 'FRY40', 'FRY50',
 'NO0B1', 'NO0B2'
]
border_data_file_prefix = 'NUTS_BN_01M_2021_3857_LEVL_'
border_data_file_suffix = '.json'
points_data_file_prefix = 'NUTS_LB_2021_3857_LEVL_'
points_data_file_suffix = '.json'
country_code_header = 'Map country'
country_code_header_in_map_data = 'CNTR_CODE'
heat_bar_map = 'Mopo_to_dark'