


historical_dataframe_name = 'Historical data'
demand_dataframe_name = 'Demand data'


source_folder = 'non-road'
output_folder = 'non-road-output'
demand_file = 'scenario_demands.csv'
demand_index = ['Country Code', 'Mode', 'Year', 'Energy carrier']
demand_header = ['Demand_PJ']

historical_year = 2023
countries = ['Netherlands', 'Andorra', 'Kiribati']
country_codes = ['NL', 'AND', 'KIR']
[modes]
[modes.domestic_aviation]
code = 'FC_TRA_DAVI_E'
energy_carriers = [
    'Kerosene-type jet fuel (excluding biofuel portion)',
    'Blended bio jet kerosene',
    'Aviation gasoline',
]

[modes.international_aviation]
code = 'INTAVI'
energy_carriers = [
    'Kerosene-type jet fuel (excluding biofuel portion)',
    'Blended bio jet kerosene',
    'Aviation gasoline',
]

[mode_energy_carriers]
air = [
    'Kerosene-type jet fuel (excluding biofuel portion)',
    'Blended bio jet kerosene',
    'Aviation gasoline',
    'Total'
]
sea = ['heavy fuel oil', 'olive oil']

[progress_bars]
display_scenario_run = true
scenario_run_description =  'Scenarios started'


[parallel_processing]
set_amount_of_processes = false
amount_of_processes = 4

[files]
# Indicate below if you want to save your Pandas DataFrames in the
# listed formats (put a true if you want to do so, false if you don't)
[files.dataframe_outputs]
csv = true
json = false
html = false
latex = false
xml = false
clipboard = false  # This saves the file to the local clipboard
excel = false
hdf = false
feather = false
parquet = false
stata = false
pickle = true
sql = true

[Eurostat]

fetch = false
table_code = 'nrg_bal_c'
table_name = 'Eurostat complete energy balances'
index_headers = ['nrg_bal', 'siec', 'unit', 'geo\TIME_PERIOD']
unit_to_use = 'TJ'

[Energy_carriers]
code_file = 'input/siec.csv'
code_column ='Notation'
name_column = 'Label'
status_column = 'Status'