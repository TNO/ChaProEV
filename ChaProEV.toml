
[variants]
use_variants = false
csv_version = true
use_years_in_profiles =  true

[parallel_processing]
set_amount_of_processes = false
amount_for_scenarios = 4
amount_for_pickle_saves = 4

[interim_files]
pickle = true
consumption_tables_frequencies = ['hourly', 'daily', 'weekly', 'monthly', 'yearly']
save_consumption_table = [false, false, true, false, false]

[profile_dataframe]
headers = [
    'Reference charge drawn from network (kWh)',
    'Connected Battery space (kWh)',
    'Connected State of charge (kWh)',
    'Connected Battery capacity (kWh)',
    'Demand for next leg (kWh) (from network)',
    'Demand for next leg (kWh) (to vehicle)',
    'Connected vehicles (%)',
    'Charging Power from Network (kW)',
    'Charging Power to Vehicles (kW)',
    'Vehicle Discharge Power (kW)',
    'Discharge Power to Network (kW)',

]

fleet_headers = [
    'Reference charge drawn from network (MWh)',
    'Connected Battery space (kWh)',
    'Connected State of charge (kWh)',
    'Connected Battery capacity (kWh)',
    'Demand for next leg (MWh) (from network)',
    'Demand for next leg (MWh) (to vehicle)',
    'Connected vehicles (thousands)',
    'Charging Power from Network (MW)',
    'Charging Power to Vehicles (MW)',
    'Vehicle Discharge Power (MW)',
    'Discharge Power to Network (MW)',

]
do_fleet_tables =  true
fleet_file_name = 'fleets.csv'

[sessions_dataframe]


properties = [
    'location', 'start_time', 'end_time',
    'previous_leg_consumption', 'next_leg_consumption',
    'connectivity',
    'power_to_vehicle','power_from_network', 
    'power_from_vehicle', 'power_to_network'
]
dataframe_headers = [
    'Location', 'Start time from day start (hours)', 'End time from day start (hours)',
    'Demand for incoming leg (kWh) (to vehicle)', 'Demand for next leg (kWh) (to vehicle)',
    'Connectivity (%)',
    'Charging Power to Vehicles (kW)', 'Charging Power from Network (kW)',
    'Vehicle Discharge Power (kW)', 'Discharge Power to Network (kW)',
]
run_dataframe_headers = [
    'Location', 'Start time', 'End time',
    'Demand for incoming leg (kWh) (to vehicle)', 'Demand for next leg (kWh) (to vehicle)',
    'Connectivity (%)',
    'Charging Power to Vehicles (kW)', 'Charging Power from Network (kW)',
    'Vehicle Discharge Power (kW)', 'Discharge Power to Network (kW)',
]


display_dataframe_headers = [
    'Location', 'Start time', 'End time',
    'Demand for incoming leg (kWh) (to vehicle)', 'Demand for next leg (kWh) (to vehicle)',
    'Connectivity (%)',
    'Charging Power to Vehicles (kW)', 'Charging Power from Network (kW)',
    'Vehicle Discharge Power (kW)', 'Discharge Power to Network (kW)',
    'Maximal Possible Charge to Vehicles (kWh)',
    'Charge to Vehicles (kWh)', 'Charge from Network (kWh)'
]

display_dataframe_index = [
    'Location', 'Start time', 'End time'
]


fleet_display_dataframe_headers = [
    'Previous leg consumption (MWh)', 'Next leg consumption (MWh)',
    'Connectivity (thousands)',
    'Charging Power to Vehicles (MW)', 'Charging Power from Network (MW)',
    'Vehicle Discharge Power (MW)', 'Discharge Power to Network (MW)',
    'Maximal Possible Charge to Vehicles (MWh)',
    'Charge to Vehicles (MWh)', 'Charge from Network (MWh)'
]

# Parameters for plots (colors, sizes, etc.)
[plots]
[plots.vehicle_temperature_efficiency]
style = 'fivethirtyeight'
source_data_folder = 'input'
source_data_file = 'vehicle_temperature_efficiencies.pkl'
fit_color = 'kraken_ice_blue'
fit_line_size = 1
geotab_data_color = 'kraken_deep_sea_blue'
geotab_data_size = 8
title_size = 14


# File-related parameters
[files]
# General parameters
input_root = 'input'
output_root = 'output'
# For files that group data (such as (sqlite) databases or Excel workbooks)
groupfile_root = 'ChaProEV'

[files.figures]
# Parameters for plots/figures
dpi = 240
# Indicate below if you want to save your (Matplotlib) figures
# In the given formats, and the dpi you want to use (common for all)
[files.figures.outputs]
png = true
pdf = true
svg = true
eps = true


# Indicate below if you want to save your Pandas DataFrames in the
# listed formats (put a true if you want to do so, false if you don't)
[files.dataframe_outputs]
csv = true
json = false
html = false
latex = false
xml = false
clipboard = false  # This saves the file to the local clipboard
excel = false
hdf = false
feather = false
parquet = false
stata = false
pickle = true
sql = true

[maps]
map_data_folder = 'input/map_data'
area_data_file_name = 'NUTS_RG_01M_2021_3857_LEVL_3.json'
general_exclusion_codes = [
 'ES703', 'ES704', 'ES705', 'ES706', 'ES707', 'ES708', 'ES709',
 'PT200', 'PT300',
 'FRY10', 'FRY20', 'FRY30', 'FRY40', 'FRY50',
 'NO0B1', 'NO0B2'
]
border_data_file_prefix = 'NUTS_BN_01M_2021_3857_LEVL_'
border_data_file_suffix = '.json'
points_data_file_prefix = 'NUTS_LB_2021_3857_LEVL_'
points_data_file_suffix = '.json'
country_code_header = 'Map country'
country_code_header_in_map_data = 'CNTR_CODE'
heat_bar_map = 'Mopo_to_dark'

# Defining custom colors with the RGB values
[colors]
kraken_deep_sea_blue = [0, 22, 40]
kraken_ice_blue = [153, 217, 217]
kraken_boundless_blue = [53, 84, 100]
kraken_shadow_blue = [104, 162, 185]
kraken_red_alert = [233, 7, 43]
Mopo_darkest = [10, 10, 70]
Mopo_dark = [9, 9, 124]
Mopo_light = [0, 88, 143]
Mopo_lightest = [102, 177, 206]
SFC_grenat = [133, 20, 43]
GSHC_grenat = [109, 30, 48]
GSHC_gold = [255, 211, 0]
TNO_white = [255, 255, 255]
TNO_ink = [0, 3, 10]
TNO_dark_blue = [0, 36, 132]
TNO_blue = [18, 62, 183]
TNO_gray = [240, 243, 250]
TNO_action_blue = [51, 105, 255]
TNO_action_orange = [245, 113, 24]
TNO_sustainable_green = [46, 163, 57]
TNO_digital_blue = [102, 190, 204]
TNO_safe_purple = [141, 112, 204]
TNO_healthy_yellow = [245, 200, 20]
TNO_light_orange = [255, 169, 112]

# Defining color bars with lists of colors they use
[color_bars]
kraken = [
    'kraken_deep_sea_blue', 'kraken_boundless_blue',
    'kraken_shadow_blue', 'kraken_ice_blue']
Mopo_to_light = ['Mopo_darkest', 'Mopo_dark', 'Mopo_light', 'Mopo_lightest']
Mopo_to_dark = ['Mopo_lightest', 'Mopo_light', 'Mopo_dark', 'Mopo_darkest']


[unit_conversions]
JOULES_IN_A_KWH = 3.6e6
# time-related parameters/constants
[time]
SECONDS_PER_HOUR = 3600
HOURS_IN_A_DAY = 24
MONTHS_IN_A_YEAR = 12
MAX_DAYS_IN_A_MONTH = 31
DAYS_IN_A_YEAR = 365.25
DAYS_IN_A_WEEK = 7
weekend_day_numbers = [6, 7]
first_hour_number = 1
# Put 0 if you start counting at 0, 1 if you start counting at 1
# The SPINE toolbox uses 1
# This is only for the hour number list (and related lists)
[numbers]
zero_threshold = 1e-12
# Float precision can mean that we have exteremly small values
# that are actually zero


[consumption]
energy_carriers = ['electricity', 'gasoline', 'diesel', 'hydrogen']
consumption_table_name = 'weekly_consumption_table'
time_header = 'Week number'
distance_header = 'Kilometers'
fleet_distance_header = 'Thousand Kilometers'
energy_carriers_consumption_names = ['electricity consumption kWh', 'gasoline consumption litres', 'diesel consumption litres', 'hydrogen consumption kg']
fleet_energy_carriers_consumption_names = ['electricity consumption MWh', 'gasoline consumption thousand litres', 'diesel consumption thousand litres', 'hydrogen consumption tonnes']

[home_type]
do_car_home_type_split = false
percentages_file = 'car_own_driveway_percentage.csv'
index_name = 'Variant name'
own_driveway_name = 'own_driveway'
on_street_name = 'street_parking'
profiles_index = ['Time Tag', 'Hour Number', 'SPINE_hour_number', 'Day Type', 'Hour index from day start']
sessions_index = ['Location', 'Start time', 'End time']
sessions_values_columns = [    
    'Demand for incoming leg (kWh) (to vehicle)', 'Demand for next leg (kWh) (to vehicle)',
    'Connectivity (%)',
    'Charging Power to Vehicles (kW)', 'Charging Power from Network (kW)',
    'Vehicle Discharge Power (kW)', 'Discharge Power to Network (kW)',
    'Maximal Possible Charge to Vehicles (kWh)',
    'Charge to Vehicles (kWh)', 'Charge from Network (kWh)'
]

[sessions]
produce = false
generate_profiles = false
[standard_profiles]
produce = true

[progress_bars]
display_scenario_run = true
scenario_run_description =  'Scenarios started'
display_saving_pool_run = true
saving_pool_run_description =  'Saving extra end outputs started'

[discharge]
no_discharge_efficiency_output = 'No discharge'
no_charge_efficiency_output = 'No charge'