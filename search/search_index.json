{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ChaProEV Test More Even more List of relevant files and modules","title":"Home"},{"location":"#chaproev","text":"Test","title":"ChaProEV"},{"location":"#more","text":"","title":"More"},{"location":"#even-more","text":"","title":"Even more"},{"location":"#list-of-relevant-files-and-modules","text":"","title":"List of relevant files and modules"},{"location":"charging/","text":"More Even more List of relevant files and modules ChaProEV.py Where you run the model scenarios folder This folder contains scenario configuration files. There is one per scenario, containing all necessary parameters to run the scenario. To add a scenario, copy one of the existing files and add/remove/modify parameters as required, including the first parameter, which is the scenario name, which should be the same as the file name (it might work with another name, but this is not tested and there is no reason to have different names for the same scenario). These scenario files contain the following sections: - unit_conversions: Parameters to convert units - files: File-related parameters (folders, output type choices, etc.) - colors: Color-related parameters(defining new ones, as well as color bars) - time: Time-related parameters and constants needed in formulas - run: Parameters related to the run, such as timing, and elements such as locations, vehicles, legs, trips, etc. - weather: Parameters related to the weather, such as elements to define what we want to download from various sources, where we store weather data, how we process it, or how we want to label quantities - plots: Parameters for plots (colors, sizes, etc.) define.py: This module defines and declares classes for the different objects that define the system (the parameters/defintions come from a parameters file), namely: 1. Legs: Legs are point-to-point vehicle movements (i.e. movements where the vehicle goes from a start location and ends/stops at an end location). 2. Vehicles: Each vehicle type (or subtype) is defined in this class. weather.py This module contains functions related to weather data and factors. The weather data is pulled from the CDS (Climate Data Store) ERA-5 weather data from the Copernicus institute . This data contains many quantities (such as temperature, precipitation, or solar radiation) at an hourly level (starting in 1950) for the whole world, at a one-decimal resolution for latitudes and longitudes. Note that the data sometimes has trailing digits, but the resolution still seems to be to the first decimal. This is the reason why we round the coordinate values in our processing functions. It contains the following functions: 1. download_cds_weather_quantity: Downloads CDS ERA-5 weather data for a given quantity in a given area. 2. download_all_cds_weather_data: Downloads all the necessary CDS weather data. 3. make_weather_dataframe: This function makes a weather DataFrame into one we can use by removing empty data and processing data into forms useful for the model. 4. write_weather_database\" This function writes the weather database. 5. get_hourly_values: This function takes a Dataframe for a given weather quantity. If this is a cumulative quantity, it adds hourly values to it. 6. get_all_hourly_values: This functions adds hourly values to cumulative quantities in the weather database. 7. get_EV_tool_data: : This gets the temperature efficiency data from the EV tool made by geotab . 8. temperature_efficiency_factor: This function returns the temperature efficiency factor that corrects the baseline vehicle efficiency. 9. plot_temperature_efficiency: Plots the temperature efficiency correction factor (source data versus interpolation)of electric vehicles. 10. get_run_location_weather_quantity: Returns a chosen weather quantity for a given location and a given runtime. 11. get_run_weather_data: Fetches the weather data and efficiency factors and puts it into a table that is saved to files/databases. 12. solar_efficiency_factor: This gives us the efficiency factor of solar panels (i.e. how much of the solar radiation is converted into electricity). THIS IS A PLACEHOLDER FUNCTION 13. setup_weather: This runs all the functions necessary to get the run weather factors for a given case. 14. get_location_weather_quantity: * Returns the value a a chosen weather quantity for a given location and time tag. run_time.py: This module defines time structures. It contains the following functions: 1. get_time_range: This function returns the time range of the run, and the associated hour numbers, based on values found in the parameters file. 2. get_time_stamped_dataframe: This function creates a DataFrame with the timestamps of the run as index (and hour numbers as a column). 3. get_day_type: Tells us the date type of a given time_tag. 4. add_day_type_to_time_stamped_dataframe: Adds a column with the date type to a time-stamped_dataframe writing.py: This contains functions related to writting outputs. It contains the following functions: 1. write_scenario_parameters: This function writes the scenario parameters to the output files (either as separate files, or as tables/sheets in groupfiles.) mobility.py: This module computes the various functions related to mobility. It contains the following functions: 1. get_trip_probabilities_per_day_type: This function computes the trip probabilities per day type. Temperature efficiency This function returns the temperature efficiency factor that corrects the baseline vehicle efficiency. It uses a data file (extracted from EV tool made by geotab . This information is based on 5.2 million trips by 4200 vehicles. The degree 6 polynomial fit is: $$ C(T)=0.7078+0.01751\\cdot T+0.0001611\\cdot T^2-1.036\\cdot 10^{-5}\\cdot T^3 -3.581\\cdot 10^{-7}\\cdot T^4+1.746\\cdot 10^{-9}\\cdot T^5 +1.07\\cdot10^{-10}\\cdot T^6 $$ where T is the ambient temparture (in the weather data, it's the temperature at 2 meters), and C is the efficiency correction factor. Plotting the fit verus the data shows that thisi a great fit:","title":"Charging"},{"location":"charging/#more","text":"","title":"More"},{"location":"charging/#even-more","text":"","title":"Even more"},{"location":"charging/#list-of-relevant-files-and-modules","text":"","title":"List of relevant files and modules"},{"location":"charging/#chaproevpy","text":"Where you run the model","title":"ChaProEV.py"},{"location":"charging/#scenarios-folder","text":"This folder contains scenario configuration files. There is one per scenario, containing all necessary parameters to run the scenario. To add a scenario, copy one of the existing files and add/remove/modify parameters as required, including the first parameter, which is the scenario name, which should be the same as the file name (it might work with another name, but this is not tested and there is no reason to have different names for the same scenario). These scenario files contain the following sections: - unit_conversions: Parameters to convert units - files: File-related parameters (folders, output type choices, etc.) - colors: Color-related parameters(defining new ones, as well as color bars) - time: Time-related parameters and constants needed in formulas - run: Parameters related to the run, such as timing, and elements such as locations, vehicles, legs, trips, etc. - weather: Parameters related to the weather, such as elements to define what we want to download from various sources, where we store weather data, how we process it, or how we want to label quantities - plots: Parameters for plots (colors, sizes, etc.)","title":"scenarios folder"},{"location":"charging/#definepy","text":"This module defines and declares classes for the different objects that define the system (the parameters/defintions come from a parameters file), namely: 1. Legs: Legs are point-to-point vehicle movements (i.e. movements where the vehicle goes from a start location and ends/stops at an end location). 2. Vehicles: Each vehicle type (or subtype) is defined in this class.","title":"define.py:"},{"location":"charging/#weatherpy","text":"This module contains functions related to weather data and factors. The weather data is pulled from the CDS (Climate Data Store) ERA-5 weather data from the Copernicus institute . This data contains many quantities (such as temperature, precipitation, or solar radiation) at an hourly level (starting in 1950) for the whole world, at a one-decimal resolution for latitudes and longitudes. Note that the data sometimes has trailing digits, but the resolution still seems to be to the first decimal. This is the reason why we round the coordinate values in our processing functions. It contains the following functions: 1. download_cds_weather_quantity: Downloads CDS ERA-5 weather data for a given quantity in a given area. 2. download_all_cds_weather_data: Downloads all the necessary CDS weather data. 3. make_weather_dataframe: This function makes a weather DataFrame into one we can use by removing empty data and processing data into forms useful for the model. 4. write_weather_database\" This function writes the weather database. 5. get_hourly_values: This function takes a Dataframe for a given weather quantity. If this is a cumulative quantity, it adds hourly values to it. 6. get_all_hourly_values: This functions adds hourly values to cumulative quantities in the weather database. 7. get_EV_tool_data: : This gets the temperature efficiency data from the EV tool made by geotab . 8. temperature_efficiency_factor: This function returns the temperature efficiency factor that corrects the baseline vehicle efficiency. 9. plot_temperature_efficiency: Plots the temperature efficiency correction factor (source data versus interpolation)of electric vehicles. 10. get_run_location_weather_quantity: Returns a chosen weather quantity for a given location and a given runtime. 11. get_run_weather_data: Fetches the weather data and efficiency factors and puts it into a table that is saved to files/databases. 12. solar_efficiency_factor: This gives us the efficiency factor of solar panels (i.e. how much of the solar radiation is converted into electricity). THIS IS A PLACEHOLDER FUNCTION 13. setup_weather: This runs all the functions necessary to get the run weather factors for a given case. 14. get_location_weather_quantity: * Returns the value a a chosen weather quantity for a given location and time tag.","title":"weather.py"},{"location":"charging/#run_timepy","text":"This module defines time structures. It contains the following functions: 1. get_time_range: This function returns the time range of the run, and the associated hour numbers, based on values found in the parameters file. 2. get_time_stamped_dataframe: This function creates a DataFrame with the timestamps of the run as index (and hour numbers as a column). 3. get_day_type: Tells us the date type of a given time_tag. 4. add_day_type_to_time_stamped_dataframe: Adds a column with the date type to a time-stamped_dataframe","title":"run_time.py:"},{"location":"charging/#writingpy","text":"This contains functions related to writting outputs. It contains the following functions: 1. write_scenario_parameters: This function writes the scenario parameters to the output files (either as separate files, or as tables/sheets in groupfiles.)","title":"writing.py:"},{"location":"charging/#mobilitypy","text":"This module computes the various functions related to mobility. It contains the following functions: 1. get_trip_probabilities_per_day_type: This function computes the trip probabilities per day type.","title":"mobility.py:"},{"location":"charging/#temperature-efficiency","text":"This function returns the temperature efficiency factor that corrects the baseline vehicle efficiency. It uses a data file (extracted from EV tool made by geotab . This information is based on 5.2 million trips by 4200 vehicles. The degree 6 polynomial fit is: $$ C(T)=0.7078+0.01751\\cdot T+0.0001611\\cdot T^2-1.036\\cdot 10^{-5}\\cdot T^3 -3.581\\cdot 10^{-7}\\cdot T^4+1.746\\cdot 10^{-9}\\cdot T^5 +1.07\\cdot10^{-10}\\cdot T^6 $$ where T is the ambient temparture (in the weather data, it's the temperature at 2 meters), and C is the efficiency correction factor. Plotting the fit verus the data shows that thisi a great fit:","title":"Temperature efficiency"},{"location":"consumption/","text":"","title":"Consumption"},{"location":"define/","text":"Classes Leg This class defines the legs and their properties, from a scenario file that contains a list of instances and their properties. Legs are point-to-point vehicle movements (i.e. movements where the vehicle goes from a start location and ends/stops at an end location). Parameters The parameters of a leg are: Name: The name of the leg Vehicle: The vehicle that runs the leg. If this does not correspond to the scenario vehicle name , then the leg is not declared. Note that when running a scenario, you select one vehicle, so this is in principle not necessary. The reason for having this is to allow the user to copy the baseline file and keep the location definitions that are not used for this scenario but might be so for another, thereby reducing the need for changes between scenarios. Distance: The distance driven during the leg (in kilometers) Duration: How long it takes to drive the leg (in hours) Hour in day factors: These factors add a correction to the vehicle consumption that depend on the hour in day (the first is for 00:00 to 00:59, last for 23:00 to 23:59). Note that these are actual hours, not hours in the user day (which can start and end at other moments than midnight). This is used to take into account things like traffic jams. The default value is 1. This factor is a placeholder and is currently not in use. Location This class defines the locations where the vehicles are and their properties, from a scenario file that contains a list of instances and their proper. Parameters The parameters of a location are: Name : The name of the location. Vehicle: The vehicle that uses the location. If this does not correspond to the scenario vehicle name , then the trip is not declared. Note that when running a scenario, you select one vehicle, so this is in principle not necessary. The reason for having this is to allow the user to copy the baseline file and keep the location definitions that are not used for this scenario but might be so for another, thereby reducing the need for changes between scenarios. Connectivity: A value between 0 and 1 (0% to 100%) that tells the probability that a vehicle parked at this location is connected to a charger. Charging power: The (peak) charging power of the charger at this location (in kW). Charger efficiency: A value between 0 and 1 (0% to 100%) that tells how much of the power drawn from the network is delivered to the battery of the vehicle. Latitude: The latitude of the location. This factor is a placeholder and is currently not in use. Longitude: The longitude of the location. This factor is a placeholder and is currently not in use. Base charging price: The base/reference (i.e. before flexibility/temporal changes) charging price at this location, in \u20ac/kWh. This factor is a placeholder and is currently not in use. Charging desirability: A value between 0 and 1 (0% to 100%) that tells how much the users like to charge at this location. This factor is a placeholder and is currently not in use. Percentage in location at run start: A value between 0 and 1 (0% to 100%) that tells which percentage of the vehicles start the run there. This is used if we will that in directly instead of computing it. The decision t use this is controlled by the compute_start_location_split parameter in the mobility module. Trip This class defines the trips and their properties, from a scenario file that contains a list of instances and their properties. Trips are collections of legs that take place on a given day. Note that this day does not necessarily start (and end) at midnight, but can start (and end) at an hour that is more logical/significant for the vehicle user (it could for example be 05:00 for car drivers). This day start hour parameter is universal for all trips This value is set in the scenario files. Parameters Name : The name of the trip. Vehicle: The vehicle that does the trip. If this does not correspond to the scenario vehicle name , then the trip is not declared. Note that when running a scenario, you select one vehicle, so this is in principle not necessary. The reason for having this is to allow the user to copy the baseline file and keep the trip definitions that are not used for this scenario but might be so for another, thereby reducing the need for changes between scenarios. Legs: A list of the legs in the trip. Time between legs: A list of the time spent at the arrival locations between each leg (in hours). Percentage station users: A value between 0 and 1 (0% to 100%) that tells us which percentage of users use fast charging stations. This factor is a placeholder and is currently not in use. Start probabilities: A list of values between 0 and 1 (0%-100%) adding up to 1/100% that tells us what the probability of starting the trip is at a given hour. Note that the hours start at day start hour , not at midnight. Repeated sequence: A list of repeated legs (which should follow each other) that form a repeated sequence. Repetition amounts: How often the repeated sequence is repeated. This is a list, with one value per leg repetition (the nth element corresponds to the nth appearance of the sequence in the leg list). Time between repetitions: The time between repetitions of each repeated sequence (in hours). This is a list, with one value per leg repetition (the nth element corresponds to the nth appearance of the sequence in the leg list). Mobility matrix The main aim of the trip initialization/declaration is to create a mobility matrix for the trip. This mobility matrix has, for all combinations of possible start and end locations (i.e. locations connected by a leg in the trip) and for each hour in day number (starting at the day start hour ), the following quantities: 1. Duration: The duration (in hours) of a leg between the start location and the end location. 2. Distance: The distance (in kilometers) of a leg between the start location. 3. Weighted distance: The weighted distance (in kilometers) of a leg between the start location and the end location. This corresponds to using different road types , with given weights and given mixes to account for the fact that vehicles consume more on some road types. 4. Departures amount : The chance that a vehicle, in a given hour, leaves the start location, going to the end location (amount and chance are equivalent here, as we compute on an individual vehicle basis). 5. Departures kilometers: The kilometers driven by vehicles leaving the start location at a given hour and going to the end location. This is given by the departures amount times the distance. 6. Departures weighted kilometers: The weighted (by road type) kilometers driven by vehicles leaving the start location at a given hour and going to the end location. This is given by the departures amount times the weighted distance. 7. Arrivals amount : The chance that a vehicle, in a given hour, arrives to the end location, having started the start location (amount and chance are equivalent here, as we compute on an individual vehicle basis). 8. Arrivals kilometers: The kilometers driven by vehicles arriving to the end location at a given hour, having started at the start location. This is given by the arrivals amount times the distance. 9. Arrivals weighted kilometers: The weighted (by road type) kilometers driven by vehicles arriving to the end location at a given hour, having started at the start location. This is given by the arrivals amount times the weighted distance. The model also produces a version of this mobility matrix for the whole run (which is essentially a copy of the above matrix). This run mobility matrix is the mobility matrix if the trip had a probability of 1 for the whole run. Leg repetitions Is repeat of leg or two legs???? [0, 5, 5, 0] If next leg is also repeated/still has repeats left, then it is repeated after the leg in question so when putting a leg, check if it is repeated. If so, check if the next is repeated, until you have no repeats (or end the list). Add on of each repeated legs then number of repeats goes down by one and redo Have one trip per day type for non-cars Reference to day start hour cross-links with scenario","title":"Define"},{"location":"define/#classes","text":"","title":"Classes"},{"location":"define/#leg","text":"This class defines the legs and their properties, from a scenario file that contains a list of instances and their properties. Legs are point-to-point vehicle movements (i.e. movements where the vehicle goes from a start location and ends/stops at an end location).","title":"Leg"},{"location":"define/#parameters","text":"The parameters of a leg are: Name: The name of the leg Vehicle: The vehicle that runs the leg. If this does not correspond to the scenario vehicle name , then the leg is not declared. Note that when running a scenario, you select one vehicle, so this is in principle not necessary. The reason for having this is to allow the user to copy the baseline file and keep the location definitions that are not used for this scenario but might be so for another, thereby reducing the need for changes between scenarios. Distance: The distance driven during the leg (in kilometers) Duration: How long it takes to drive the leg (in hours) Hour in day factors: These factors add a correction to the vehicle consumption that depend on the hour in day (the first is for 00:00 to 00:59, last for 23:00 to 23:59). Note that these are actual hours, not hours in the user day (which can start and end at other moments than midnight). This is used to take into account things like traffic jams. The default value is 1. This factor is a placeholder and is currently not in use.","title":"Parameters"},{"location":"define/#location","text":"This class defines the locations where the vehicles are and their properties, from a scenario file that contains a list of instances and their proper.","title":"Location"},{"location":"define/#parameters_1","text":"The parameters of a location are: Name : The name of the location. Vehicle: The vehicle that uses the location. If this does not correspond to the scenario vehicle name , then the trip is not declared. Note that when running a scenario, you select one vehicle, so this is in principle not necessary. The reason for having this is to allow the user to copy the baseline file and keep the location definitions that are not used for this scenario but might be so for another, thereby reducing the need for changes between scenarios. Connectivity: A value between 0 and 1 (0% to 100%) that tells the probability that a vehicle parked at this location is connected to a charger. Charging power: The (peak) charging power of the charger at this location (in kW). Charger efficiency: A value between 0 and 1 (0% to 100%) that tells how much of the power drawn from the network is delivered to the battery of the vehicle. Latitude: The latitude of the location. This factor is a placeholder and is currently not in use. Longitude: The longitude of the location. This factor is a placeholder and is currently not in use. Base charging price: The base/reference (i.e. before flexibility/temporal changes) charging price at this location, in \u20ac/kWh. This factor is a placeholder and is currently not in use. Charging desirability: A value between 0 and 1 (0% to 100%) that tells how much the users like to charge at this location. This factor is a placeholder and is currently not in use. Percentage in location at run start: A value between 0 and 1 (0% to 100%) that tells which percentage of the vehicles start the run there. This is used if we will that in directly instead of computing it. The decision t use this is controlled by the compute_start_location_split parameter in the mobility module.","title":"Parameters"},{"location":"define/#trip","text":"This class defines the trips and their properties, from a scenario file that contains a list of instances and their properties. Trips are collections of legs that take place on a given day. Note that this day does not necessarily start (and end) at midnight, but can start (and end) at an hour that is more logical/significant for the vehicle user (it could for example be 05:00 for car drivers). This day start hour parameter is universal for all trips This value is set in the scenario files.","title":"Trip"},{"location":"define/#parameters_2","text":"Name : The name of the trip. Vehicle: The vehicle that does the trip. If this does not correspond to the scenario vehicle name , then the trip is not declared. Note that when running a scenario, you select one vehicle, so this is in principle not necessary. The reason for having this is to allow the user to copy the baseline file and keep the trip definitions that are not used for this scenario but might be so for another, thereby reducing the need for changes between scenarios. Legs: A list of the legs in the trip. Time between legs: A list of the time spent at the arrival locations between each leg (in hours). Percentage station users: A value between 0 and 1 (0% to 100%) that tells us which percentage of users use fast charging stations. This factor is a placeholder and is currently not in use. Start probabilities: A list of values between 0 and 1 (0%-100%) adding up to 1/100% that tells us what the probability of starting the trip is at a given hour. Note that the hours start at day start hour , not at midnight. Repeated sequence: A list of repeated legs (which should follow each other) that form a repeated sequence. Repetition amounts: How often the repeated sequence is repeated. This is a list, with one value per leg repetition (the nth element corresponds to the nth appearance of the sequence in the leg list). Time between repetitions: The time between repetitions of each repeated sequence (in hours). This is a list, with one value per leg repetition (the nth element corresponds to the nth appearance of the sequence in the leg list).","title":"Parameters"},{"location":"define/#mobility-matrix","text":"The main aim of the trip initialization/declaration is to create a mobility matrix for the trip. This mobility matrix has, for all combinations of possible start and end locations (i.e. locations connected by a leg in the trip) and for each hour in day number (starting at the day start hour ), the following quantities: 1. Duration: The duration (in hours) of a leg between the start location and the end location. 2. Distance: The distance (in kilometers) of a leg between the start location. 3. Weighted distance: The weighted distance (in kilometers) of a leg between the start location and the end location. This corresponds to using different road types , with given weights and given mixes to account for the fact that vehicles consume more on some road types. 4. Departures amount : The chance that a vehicle, in a given hour, leaves the start location, going to the end location (amount and chance are equivalent here, as we compute on an individual vehicle basis). 5. Departures kilometers: The kilometers driven by vehicles leaving the start location at a given hour and going to the end location. This is given by the departures amount times the distance. 6. Departures weighted kilometers: The weighted (by road type) kilometers driven by vehicles leaving the start location at a given hour and going to the end location. This is given by the departures amount times the weighted distance. 7. Arrivals amount : The chance that a vehicle, in a given hour, arrives to the end location, having started the start location (amount and chance are equivalent here, as we compute on an individual vehicle basis). 8. Arrivals kilometers: The kilometers driven by vehicles arriving to the end location at a given hour, having started at the start location. This is given by the arrivals amount times the distance. 9. Arrivals weighted kilometers: The weighted (by road type) kilometers driven by vehicles arriving to the end location at a given hour, having started at the start location. This is given by the arrivals amount times the weighted distance. The model also produces a version of this mobility matrix for the whole run (which is essentially a copy of the above matrix). This run mobility matrix is the mobility matrix if the trip had a probability of 1 for the whole run.","title":"Mobility matrix"},{"location":"define/#leg-repetitions","text":"Is repeat of leg or two legs???? [0, 5, 5, 0] If next leg is also repeated/still has repeats left, then it is repeated after the leg in question so when putting a leg, check if it is repeated. If so, check if the next is repeated, until you have no repeats (or end the list). Add on of each repeated legs then number of repeats goes down by one and redo Have one trip per day type for non-cars Reference to day start hour cross-links with scenario","title":"Leg repetitions"},{"location":"general_parameters/","text":"Purpose The purpose of the ChaProEV.toml file is to set parameters that are common for all your scenarios. This page describes the various parameters. You can use the navigation bar on the left to go directly to a group of parameters (or a given parameter). This mostly contains general parameters that should not change too much from case to case. As such, you can take the version provided in the repository (and possibly modify one or two things). variants The variants section of the configuration file sets parameters to create scenario variants (see that page for details). use_variants Setting the use_variants parameters to true creates variants, while setting it to false skips variant creation althogether. csv_version Setting the csv_version to true parameters makes you use csv files to define your variants (in a folder within the variants folder: this folder needs to have the same name as your case). Setting it to false makes you use a toml file in the variants folder (case_name.toml). use_years_in_profiles This is used to create different variants per year when doing car home own driveway and street parking splits parallel_processing This parallel processing section of the configuration file sets parameters to manage the parallel processing/multiprocessing of the model (which reduces the model run time, see link for details). set_amount_of_processes Set this as false if you want the amount of parallel processes to be determined by the model (via the multiprocessing standard library of Python ). Set this to true if you want to set the amount of processes yourself. amount_for_scenarios If you put true in set_amount_of_processes, provide a number of parallel processes here to run scenarios in parallel. amount_for_pickle_saves If you put true in set_amount_of_processes, provide a number of parallel processes here to save the pickle output saves to other formats in parallel (see writing module for details). interim_files This concerns parameters for saving intermediary results to files. pickle Set this to true to save interim results to pickle files. Set this to false not to do this. consumption_tables_frequencies Provide a list of consumption tables frequencies (see consumption module ). The default is the following list ['hourly', 'daily', 'weekly', 'monthly', 'yearly'] save_consumption_table Provide a list of booleans (true or false) to save a given frequency to file (this list needs to have the same length as the above list): true save a file for that frequency and false does not. profile_dataframe These are the headers that appear in output dataframes. headers This one is for profiles (at one-vehicle scale). fleet_headers This one is for the fleet-level dataframes. do_fleet_tables Set this to true to create fleet-level tables. fleet_file_name The file name (has to be a csv inside the input/your_case folder) containing the fleet characteristics. See here for details about this file. sessions_dataframe This is to create the session dataframes. properties Those are the quantities we want to put in the session dataframes. dataframe_headers Those are the headers of the session dataframes at the day level. run_dataframe_headers Those are the headers of the session dataframes for the whole run. display_dataframe_headers These are the headers of the display/final output dataframe headers at vehicle level. display_dataframe_index These give the index of the display/final output dataframe headers. fleet_display_dataframe_headers These are the headers of the display/final output dataframe headers at fleet level. plots This contains parameters for output plots (colors, styles, sizes, etc.). vehicle_temperature_efficiency This set of parameters is for the range-temperature plot. style This is a string with one of the available Matplotlib styles . source_data_folder Folder where the data to plot is. source_data_file File containg the data to plot. fit_color The color name of fit line. fit_line_size The size of the fir line. geotab_data_color The color of the data points. geotab_data_size The size of the data points. title_size The size of the plot title. files General file parameters. input_root The name of the folder where your input data goes (it goes to a subfolder of this with the name of your case). output_root The name of the folder where your output data goes (it goes to a subfolder of this with the name of your case). groupfile_root This is for files that group data (such as (sqlite) databases or Excel workbooks) and will be the name of that grouping file. figures Parameters for plots/figures. dpi Change this to change the resolution of the output figures. outputs Indicate if you want to save your (Matplotlib) figures (true if you do, false if you don't) in various formats. dataframe_outputs Indicate if you want to save your Pandas DataFrames in the listed formats (put a true if you want to do so, false if you don't). Clipboard saves to the local clipboard, not a file. maps Parameters for making maps. map_data_folder The folder where the map data is. area_data_file_name The file containing map areas. general_exclusion_codes Excluded map codes. border_data_file_prefix The prefix of the border data file. border_data_file_suffix The suffix of the border data file. points_data_file_prefix The prefix of the points data file. points_data_file_suffix The suffix of the points data file. country_code_header The header we use for country codes. country_code_header_in_map_data The country code header in tnhe source data. heat_bar_map The heat bar map/scale we want to use for maps (is the name of a color bar ). colors Definitions of custom colors (with RGB values, from 0 to 255). color_bars You can deine color bars here, by listing the colors they use (in order). unit_conversions This contains various constants used for unit conversions, such as the amount of Joules in a kiloWatt-hour. Some are grouped (time conversions). The times subpart also contains the codes for weekend day numbers and the index of the first hour in the year (often 0, but sometimes 1, as for the SPINE toolbox). numbers This contains a threshold to avoid issues with float precision and exteremely small values that are actually zero. consumption This contains settings (mostly headers and display names) related to the connusmption tables. energy_carriers A list of the energy carriers that come in the consumption table. consumption_table_name The name of the consumption table. time_header The header used for the time index in the consumption table. distance_header The header used for the distance column in the consumption table. fleet_distance_header The header used for the distance column in the fleet consumption table. energy_carriers_consumption_names The headers for each emergy carrier in the consumption table. fleet_energy_carriers_consumption_names The headers for each emergy carrier in the fleet consumption table. home_type These are parametrers related to the home type split (split for cars between cars with their own driveway and street parking). do_car_home_type_split Set this to true to compute the split. Set it to false not to do it. percentages_file The file name (has to be a csv inside the input/your_case folder) containing the spli. See here for details about this file. index_name The index header in the source file. own_driveway_name The header for the own driveway percentage. Also used for the output profile file names. on_street_name The header for the street parking percentage. Used for the output profile file names. profiles_index The index for the profile outputs. sessions_index The index for the sessions outputs. sessions_values_columns The columns of the sessions dataframes. sessions Parameters used for the sessions . produce Set to true if you want to create sessions , to false if you don't. generate_profiles Set to true if you want to [generate profiles from sessions][scenarios_module.md#Generate-profiles-from-sessions], to false if you don't. standard_profiles produce Set to true if you want to produce standard charging profiles , false if you don't. progress_bars Parameters related to displaying progress bars. display_scenario_run Set to true to show a progress bar for the computing of scenarios, false if you don't. scenario_run_description Text to display for the scenarios progress bar. display_saving_pool_run Set to true to show a progress bar for the saving of output files, false if you don't. saving_pool_run_description Text to display for the output file saving progress bar. discharge Parameters related to vehicle discharge. no_discharge_efficiency_output Message to display if the discharge efficiencncy value is empty. no_charge_efficiency_output Message to display if the charge efficiencncy value is empty.","title":"General parameters"},{"location":"general_parameters/#purpose","text":"The purpose of the ChaProEV.toml file is to set parameters that are common for all your scenarios. This page describes the various parameters. You can use the navigation bar on the left to go directly to a group of parameters (or a given parameter). This mostly contains general parameters that should not change too much from case to case. As such, you can take the version provided in the repository (and possibly modify one or two things).","title":"Purpose"},{"location":"general_parameters/#variants","text":"The variants section of the configuration file sets parameters to create scenario variants (see that page for details).","title":"variants"},{"location":"general_parameters/#use_variants","text":"Setting the use_variants parameters to true creates variants, while setting it to false skips variant creation althogether.","title":"use_variants"},{"location":"general_parameters/#csv_version","text":"Setting the csv_version to true parameters makes you use csv files to define your variants (in a folder within the variants folder: this folder needs to have the same name as your case). Setting it to false makes you use a toml file in the variants folder (case_name.toml).","title":"csv_version"},{"location":"general_parameters/#use_years_in_profiles","text":"This is used to create different variants per year when doing car home own driveway and street parking splits","title":"use_years_in_profiles"},{"location":"general_parameters/#parallel_processing","text":"This parallel processing section of the configuration file sets parameters to manage the parallel processing/multiprocessing of the model (which reduces the model run time, see link for details).","title":"parallel_processing"},{"location":"general_parameters/#set_amount_of_processes","text":"Set this as false if you want the amount of parallel processes to be determined by the model (via the multiprocessing standard library of Python ). Set this to true if you want to set the amount of processes yourself.","title":"set_amount_of_processes"},{"location":"general_parameters/#amount_for_scenarios","text":"If you put true in set_amount_of_processes, provide a number of parallel processes here to run scenarios in parallel.","title":"amount_for_scenarios"},{"location":"general_parameters/#amount_for_pickle_saves","text":"If you put true in set_amount_of_processes, provide a number of parallel processes here to save the pickle output saves to other formats in parallel (see writing module for details).","title":"amount_for_pickle_saves"},{"location":"general_parameters/#interim_files","text":"This concerns parameters for saving intermediary results to files.","title":"interim_files"},{"location":"general_parameters/#pickle","text":"Set this to true to save interim results to pickle files. Set this to false not to do this.","title":"pickle"},{"location":"general_parameters/#consumption_tables_frequencies","text":"Provide a list of consumption tables frequencies (see consumption module ). The default is the following list ['hourly', 'daily', 'weekly', 'monthly', 'yearly']","title":"consumption_tables_frequencies"},{"location":"general_parameters/#save_consumption_table","text":"Provide a list of booleans (true or false) to save a given frequency to file (this list needs to have the same length as the above list): true save a file for that frequency and false does not.","title":"save_consumption_table"},{"location":"general_parameters/#profile_dataframe","text":"These are the headers that appear in output dataframes.","title":"profile_dataframe"},{"location":"general_parameters/#headers","text":"This one is for profiles (at one-vehicle scale).","title":"headers"},{"location":"general_parameters/#fleet_headers","text":"This one is for the fleet-level dataframes.","title":"fleet_headers"},{"location":"general_parameters/#do_fleet_tables","text":"Set this to true to create fleet-level tables.","title":"do_fleet_tables"},{"location":"general_parameters/#fleet_file_name","text":"The file name (has to be a csv inside the input/your_case folder) containing the fleet characteristics. See here for details about this file.","title":"fleet_file_name"},{"location":"general_parameters/#sessions_dataframe","text":"This is to create the session dataframes.","title":"sessions_dataframe"},{"location":"general_parameters/#properties","text":"Those are the quantities we want to put in the session dataframes.","title":"properties"},{"location":"general_parameters/#dataframe_headers","text":"Those are the headers of the session dataframes at the day level.","title":"dataframe_headers"},{"location":"general_parameters/#run_dataframe_headers","text":"Those are the headers of the session dataframes for the whole run.","title":"run_dataframe_headers"},{"location":"general_parameters/#display_dataframe_headers","text":"These are the headers of the display/final output dataframe headers at vehicle level.","title":"display_dataframe_headers"},{"location":"general_parameters/#display_dataframe_index","text":"These give the index of the display/final output dataframe headers.","title":"display_dataframe_index"},{"location":"general_parameters/#fleet_display_dataframe_headers","text":"These are the headers of the display/final output dataframe headers at fleet level.","title":"fleet_display_dataframe_headers"},{"location":"general_parameters/#plots","text":"This contains parameters for output plots (colors, styles, sizes, etc.).","title":"plots"},{"location":"general_parameters/#vehicle_temperature_efficiency","text":"This set of parameters is for the range-temperature plot.","title":"vehicle_temperature_efficiency"},{"location":"general_parameters/#style","text":"This is a string with one of the available Matplotlib styles .","title":"style"},{"location":"general_parameters/#source_data_folder","text":"Folder where the data to plot is.","title":"source_data_folder"},{"location":"general_parameters/#source_data_file","text":"File containg the data to plot.","title":"source_data_file"},{"location":"general_parameters/#fit_color","text":"The color name of fit line.","title":"fit_color"},{"location":"general_parameters/#fit_line_size","text":"The size of the fir line.","title":"fit_line_size"},{"location":"general_parameters/#geotab_data_color","text":"The color of the data points.","title":"geotab_data_color"},{"location":"general_parameters/#geotab_data_size","text":"The size of the data points.","title":"geotab_data_size"},{"location":"general_parameters/#title_size","text":"The size of the plot title.","title":"title_size"},{"location":"general_parameters/#files","text":"General file parameters.","title":"files"},{"location":"general_parameters/#input_root","text":"The name of the folder where your input data goes (it goes to a subfolder of this with the name of your case).","title":"input_root"},{"location":"general_parameters/#output_root","text":"The name of the folder where your output data goes (it goes to a subfolder of this with the name of your case).","title":"output_root"},{"location":"general_parameters/#groupfile_root","text":"This is for files that group data (such as (sqlite) databases or Excel workbooks) and will be the name of that grouping file.","title":"groupfile_root"},{"location":"general_parameters/#figures","text":"Parameters for plots/figures.","title":"figures"},{"location":"general_parameters/#dpi","text":"Change this to change the resolution of the output figures.","title":"dpi"},{"location":"general_parameters/#outputs","text":"Indicate if you want to save your (Matplotlib) figures (true if you do, false if you don't) in various formats.","title":"outputs"},{"location":"general_parameters/#dataframe_outputs","text":"Indicate if you want to save your Pandas DataFrames in the listed formats (put a true if you want to do so, false if you don't). Clipboard saves to the local clipboard, not a file.","title":"dataframe_outputs"},{"location":"general_parameters/#maps","text":"Parameters for making maps.","title":"maps"},{"location":"general_parameters/#map_data_folder","text":"The folder where the map data is.","title":"map_data_folder"},{"location":"general_parameters/#area_data_file_name","text":"The file containing map areas.","title":"area_data_file_name"},{"location":"general_parameters/#general_exclusion_codes","text":"Excluded map codes.","title":"general_exclusion_codes"},{"location":"general_parameters/#border_data_file_prefix","text":"The prefix of the border data file.","title":"border_data_file_prefix"},{"location":"general_parameters/#border_data_file_suffix","text":"The suffix of the border data file.","title":"border_data_file_suffix"},{"location":"general_parameters/#points_data_file_prefix","text":"The prefix of the points data file.","title":"points_data_file_prefix"},{"location":"general_parameters/#points_data_file_suffix","text":"The suffix of the points data file.","title":"points_data_file_suffix"},{"location":"general_parameters/#country_code_header","text":"The header we use for country codes.","title":"country_code_header"},{"location":"general_parameters/#country_code_header_in_map_data","text":"The country code header in tnhe source data.","title":"country_code_header_in_map_data"},{"location":"general_parameters/#heat_bar_map","text":"The heat bar map/scale we want to use for maps (is the name of a color bar ).","title":"heat_bar_map"},{"location":"general_parameters/#colors","text":"Definitions of custom colors (with RGB values, from 0 to 255).","title":"colors"},{"location":"general_parameters/#color_bars","text":"You can deine color bars here, by listing the colors they use (in order).","title":"color_bars"},{"location":"general_parameters/#unit_conversions","text":"This contains various constants used for unit conversions, such as the amount of Joules in a kiloWatt-hour. Some are grouped (time conversions). The times subpart also contains the codes for weekend day numbers and the index of the first hour in the year (often 0, but sometimes 1, as for the SPINE toolbox).","title":"unit_conversions"},{"location":"general_parameters/#numbers","text":"This contains a threshold to avoid issues with float precision and exteremely small values that are actually zero.","title":"numbers"},{"location":"general_parameters/#consumption","text":"This contains settings (mostly headers and display names) related to the connusmption tables.","title":"consumption"},{"location":"general_parameters/#energy_carriers","text":"A list of the energy carriers that come in the consumption table.","title":"energy_carriers"},{"location":"general_parameters/#consumption_table_name","text":"The name of the consumption table.","title":"consumption_table_name"},{"location":"general_parameters/#time_header","text":"The header used for the time index in the consumption table.","title":"time_header"},{"location":"general_parameters/#distance_header","text":"The header used for the distance column in the consumption table.","title":"distance_header"},{"location":"general_parameters/#fleet_distance_header","text":"The header used for the distance column in the fleet consumption table.","title":"fleet_distance_header"},{"location":"general_parameters/#energy_carriers_consumption_names","text":"The headers for each emergy carrier in the consumption table.","title":"energy_carriers_consumption_names"},{"location":"general_parameters/#fleet_energy_carriers_consumption_names","text":"The headers for each emergy carrier in the fleet consumption table.","title":"fleet_energy_carriers_consumption_names"},{"location":"general_parameters/#home_type","text":"These are parametrers related to the home type split (split for cars between cars with their own driveway and street parking).","title":"home_type"},{"location":"general_parameters/#do_car_home_type_split","text":"Set this to true to compute the split. Set it to false not to do it.","title":"do_car_home_type_split"},{"location":"general_parameters/#percentages_file","text":"The file name (has to be a csv inside the input/your_case folder) containing the spli. See here for details about this file.","title":"percentages_file"},{"location":"general_parameters/#index_name","text":"The index header in the source file.","title":"index_name"},{"location":"general_parameters/#own_driveway_name","text":"The header for the own driveway percentage. Also used for the output profile file names.","title":"own_driveway_name"},{"location":"general_parameters/#on_street_name","text":"The header for the street parking percentage. Used for the output profile file names.","title":"on_street_name"},{"location":"general_parameters/#profiles_index","text":"The index for the profile outputs.","title":"profiles_index"},{"location":"general_parameters/#sessions_index","text":"The index for the sessions outputs.","title":"sessions_index"},{"location":"general_parameters/#sessions_values_columns","text":"The columns of the sessions dataframes.","title":"sessions_values_columns"},{"location":"general_parameters/#sessions","text":"Parameters used for the sessions .","title":"sessions"},{"location":"general_parameters/#produce","text":"Set to true if you want to create sessions , to false if you don't.","title":"produce"},{"location":"general_parameters/#generate_profiles","text":"Set to true if you want to [generate profiles from sessions][scenarios_module.md#Generate-profiles-from-sessions], to false if you don't.","title":"generate_profiles"},{"location":"general_parameters/#standard_profiles","text":"","title":"standard_profiles"},{"location":"general_parameters/#produce_1","text":"Set to true if you want to produce standard charging profiles , false if you don't.","title":"produce"},{"location":"general_parameters/#progress_bars","text":"Parameters related to displaying progress bars.","title":"progress_bars"},{"location":"general_parameters/#display_scenario_run","text":"Set to true to show a progress bar for the computing of scenarios, false if you don't.","title":"display_scenario_run"},{"location":"general_parameters/#scenario_run_description","text":"Text to display for the scenarios progress bar.","title":"scenario_run_description"},{"location":"general_parameters/#display_saving_pool_run","text":"Set to true to show a progress bar for the saving of output files, false if you don't.","title":"display_saving_pool_run"},{"location":"general_parameters/#saving_pool_run_description","text":"Text to display for the output file saving progress bar.","title":"saving_pool_run_description"},{"location":"general_parameters/#discharge","text":"Parameters related to vehicle discharge.","title":"discharge"},{"location":"general_parameters/#no_discharge_efficiency_output","text":"Message to display if the discharge efficiencncy value is empty.","title":"no_discharge_efficiency_output"},{"location":"general_parameters/#no_charge_efficiency_output","text":"Message to display if the charge efficiencncy value is empty.","title":"no_charge_efficiency_output"},{"location":"input/","text":"Introduction Car own driveway percentage Fleets","title":"Inputs"},{"location":"input/#introduction","text":"","title":"Introduction"},{"location":"input/#car-own-driveway-percentage","text":"","title":"Car own driveway percentage"},{"location":"input/#fleets","text":"","title":"Fleets"},{"location":"make_variants/","text":"","title":"Variants"},{"location":"mobility/","text":"Mobility Module parameters","title":"Mobility"},{"location":"mobility/#mobility","text":"","title":"Mobility"},{"location":"mobility/#module-parameters","text":"","title":"Module parameters"},{"location":"multiprocessing/","text":"uses several cores at the same time scenarios: ty.List[ty.Dict] = load_scenarios(case_name) number_of_parallel_processes: int = general_parameters[ 'parallel_processing' ]['number_of_parallel_processes']['for_scenarios'] with Pool(number_of_parallel_processes) as scenarios_pool: scenarios_pool.starmap( run_scenario, zip(scenarios, repeat(case_name), repeat(general_parameters)), ) speeds up considerably set this as false if you want the amount of parallel processes to be determined by the model (via the multiprocessing standard library of Python","title":"Multiprocessing"},{"location":"outputs/","text":"","title":"Outputs"},{"location":"profiles/","text":"Approach Home type split vbmn Sessions hhgjh Standard profiles ghjkg","title":"Profiles"},{"location":"profiles/#approach","text":"","title":"Approach"},{"location":"profiles/#home-type-split","text":"vbmn","title":"Home type split"},{"location":"profiles/#sessions","text":"hhgjh","title":"Sessions"},{"location":"profiles/#standard-profiles","text":"ghjkg","title":"Standard profiles"},{"location":"run_time/","text":"","title":"Run time"},{"location":"running_model/","text":"Multirpocessing scenarios: ty.List[ty.Dict] = load_scenarios(case_name) number_of_parallel_processes: int = general_parameters[ 'parallel_processing' ]['number_of_parallel_processes']['for_scenarios'] with Pool(number_of_parallel_processes) as scenarios_pool: scenarios_pool.starmap( run_scenario, zip(scenarios, repeat(case_name), repeat(general_parameters)), ) speeds up considerably","title":"Running model"},{"location":"scenario/","text":"Scenario file description The models runs through a series of scenarios. For each scenario, you need to create a scenario file in the scenarios/your_case folder (or use a variant ). This page describes the elements of the scenario file (your_scenario.toml). run Run parameters give the elements to produce the time tags of the run range. use_day_types_in_charge_computing If set to true, the charging computations will be done per day type rather than for all days of the run, which fastens the computations. start This part gives the year, month, day, hour, and minute of the start of the computations. It is best to set this to a day hour start for consistency and then cut off the start for display (see below). For example, start on 31/12/2019 at 05:00 if your day start hour is 05:00 and if you want to show results starting on 1/1/2020 at 00:00. end This part gives the year, month, day, hour, and minute of the end of the computations. Note that the end time tag is not included in the run, so put 1/1/2021 at 00:00 if you want to compute for 2020. display_start This is the first time tag you want to show in your end results. display_end This is the first time tag that does not appear in your displayed results. frequency The time frequency of the run (size and type). For the type, use 'H' for hours, 'min' for minutes, 'S' for seconds, 'D' for days. For more info and other types, see here . The current model uses hourly (so 1 and 'h'). Changing that might require some adjustments in the code. display frequency The frequency of the displayed values can be different than the frequency of the compuatations. In the current version, this needs to be the same or less frequent than the computation frequencey above. extra_downloads This is to decide if you want to dowload some files (note that this concerns the currently inactive weather module). locations vehicle connectivity charging_power charger_efficiency latitude longitude charging_price charging_desirability An indicator (0-1) of how much people like to charge at this location percentage_in_location_at_run_start If filling it directly instead of computing it (controlled by compute_start_location_split in mobility_module below) vehicle_discharge_power proportion_of_discharge_to_network time_modulation_factors Starts at midinight legs vehicle distance duration hour_in_day_factors This factor adds a correction to the vehicle consumption that depends on the hour in day (the first is for 00:00 to 00:59, the last for 23:00 to 23:59). Note that these are actual hours, not hours in the user day (which can start and end at other moments than midnight). This is used to take into account things like traffic jams. The default value is 1. locations road_type_mix Give the road type mix We need a value for each of the road_types (see above in [transport_factors]) If the road type does not occur in the leg, simply put 0 Note that the total should be 1 (there are not checks to ensure this, so you need to make sure you do this correctly) road_types = ['highway', 'city'] mix vehicle These parameters define the scenario's vehicle. If you want profiles for several vehicles, run separate scenarios. name This is the name of the vehicle, which will be checked to see if trips and locations are actually declared. base_location not relevant for cars yearly_kilometrage Not relevant for cars, as it is built bottom-up kilometers_column_for_consumption use_weighted battery_capacity solar_panel_size_kWp base_consumption_per_km electricity_kWh = 0.76 gasoline_litres = 0.3399 diesel_litres = 0.2917 hydrogen_kg = 0.0398 CNG_kg = 0.2415 LNG_kg = 0.2415 trips vehicle legs time_between_legs This is the time spent at each interim location (same units as used general) percentage_station_users start_probabilities repeated_sequence repetition_amounts time_between_repetitions mobility_module day_start_hour This parameter defines the start of the day for the scenario. It is chosen so that there are no movements during that hour number. It represents the shift from midnight, so a day start hour of 5 means that the day starts at hour 5 (i.e. 05.00). The idea is to choose an hour that is logical for the users/matches their patterns. This is connected to the day types , as a given day will correspond to a day type. For example, the hours between 00:00 and 05:00 on a Saturday belong to the Thursday before and are as such on a week day (as opposed to a weekend day). compute_start_location_split day_types mobility_quantities battery_space_shift_quantities location_connections_headers mobility_index_names kilometers_driven_headers holiday_weeks number_of_holiday_weeks We need to provide the number of holliday weeks seprately, as counting the elements of the list above might not work, such as when the above list contains weeks 1 and 53 (which just represent the fact that years don't necessarily start and/or end at the start/end of a week). holiday_departures_in_weekend_week_numbers holiday_returns_in_weekend_week_numbers work_hours_in_a_work_day hours_worked_per_work_week hours_in_a_standard_work_week percentage_working_on_a_work_week worked_hours_per_year leisure_trips_per_weekend leisure_trips_per_week_outside_weekends maximal_fill_percentage_leisure_trips_on_non_work_weekdays weekday_leisure_trips percentage_of_weekday_leisure_trips_on_a_work_day weekend_trips_per_year holiday_trips_taken time_spent_at_holiday_destination trips_per_day_type For vehicles other than cars, we assume that there is one trip per day type. This is where we match the trips to their day type transport_factors road_types weights weather weather_factors_table_root_name source_data start_year end_year quantities raw_data_folder The following define the area over which the raw weather data will be downloaded. The corresponding in the processed weather database is below. latitude_min latitude_max longitude_min longitude_max processed_data raw_data_folder processed_folder weather_database_file_name chunk_size This parameter is there to avoid issues when writing a too large DataFrame at once (instead, we split it into chunks). quantities KELVIN_TO_CELSIUS quantity_tags quantity_processed_names cumulative_quantity_processed_names cumulative_quantities queries_for_cumulative_quantities temperature_quantities processed_index_tags These define the area of the processed data in the weather database latitude_min latitude_max longitude_min longitude_max coordinate_step EV_tool Parameters for the EV tool data from geotab EV_tool_url user_agent efficiency_curve_script_index data_splitter file_name groupfile_name folder efficiency_factor_column_name charging price_reaction_exponent desirability_reaction_exponent charging_sessions resolution","title":"Creating scenarios"},{"location":"scenario/#scenario-file-description","text":"The models runs through a series of scenarios. For each scenario, you need to create a scenario file in the scenarios/your_case folder (or use a variant ). This page describes the elements of the scenario file (your_scenario.toml).","title":"Scenario file description"},{"location":"scenario/#run","text":"Run parameters give the elements to produce the time tags of the run range.","title":"run"},{"location":"scenario/#use_day_types_in_charge_computing","text":"If set to true, the charging computations will be done per day type rather than for all days of the run, which fastens the computations.","title":"use_day_types_in_charge_computing"},{"location":"scenario/#start","text":"This part gives the year, month, day, hour, and minute of the start of the computations. It is best to set this to a day hour start for consistency and then cut off the start for display (see below). For example, start on 31/12/2019 at 05:00 if your day start hour is 05:00 and if you want to show results starting on 1/1/2020 at 00:00.","title":"start"},{"location":"scenario/#end","text":"This part gives the year, month, day, hour, and minute of the end of the computations. Note that the end time tag is not included in the run, so put 1/1/2021 at 00:00 if you want to compute for 2020.","title":"end"},{"location":"scenario/#display_start","text":"This is the first time tag you want to show in your end results.","title":"display_start"},{"location":"scenario/#display_end","text":"This is the first time tag that does not appear in your displayed results.","title":"display_end"},{"location":"scenario/#frequency","text":"The time frequency of the run (size and type). For the type, use 'H' for hours, 'min' for minutes, 'S' for seconds, 'D' for days. For more info and other types, see here . The current model uses hourly (so 1 and 'h'). Changing that might require some adjustments in the code.","title":"frequency"},{"location":"scenario/#display-frequency","text":"The frequency of the displayed values can be different than the frequency of the compuatations. In the current version, this needs to be the same or less frequent than the computation frequencey above.","title":"display frequency"},{"location":"scenario/#extra_downloads","text":"This is to decide if you want to dowload some files (note that this concerns the currently inactive weather module).","title":"extra_downloads"},{"location":"scenario/#locations","text":"","title":"locations"},{"location":"scenario/#vehicle","text":"","title":"vehicle"},{"location":"scenario/#connectivity","text":"","title":"connectivity"},{"location":"scenario/#charging_power","text":"","title":"charging_power"},{"location":"scenario/#charger_efficiency","text":"","title":"charger_efficiency"},{"location":"scenario/#latitude","text":"","title":"latitude"},{"location":"scenario/#longitude","text":"","title":"longitude"},{"location":"scenario/#charging_price","text":"","title":"charging_price"},{"location":"scenario/#charging_desirability","text":"An indicator (0-1) of how much people like to charge at this location","title":"charging_desirability"},{"location":"scenario/#percentage_in_location_at_run_start","text":"If filling it directly instead of computing it (controlled by compute_start_location_split in mobility_module below)","title":"percentage_in_location_at_run_start"},{"location":"scenario/#vehicle_discharge_power","text":"","title":"vehicle_discharge_power"},{"location":"scenario/#proportion_of_discharge_to_network","text":"","title":"proportion_of_discharge_to_network"},{"location":"scenario/#time_modulation_factors","text":"Starts at midinight","title":"time_modulation_factors"},{"location":"scenario/#legs","text":"","title":"legs"},{"location":"scenario/#vehicle_1","text":"","title":"vehicle"},{"location":"scenario/#distance","text":"","title":"distance"},{"location":"scenario/#duration","text":"","title":"duration"},{"location":"scenario/#hour_in_day_factors","text":"This factor adds a correction to the vehicle consumption that depends on the hour in day (the first is for 00:00 to 00:59, the last for 23:00 to 23:59). Note that these are actual hours, not hours in the user day (which can start and end at other moments than midnight). This is used to take into account things like traffic jams. The default value is 1.","title":"hour_in_day_factors"},{"location":"scenario/#locations_1","text":"","title":"locations"},{"location":"scenario/#road_type_mix","text":"Give the road type mix We need a value for each of the road_types (see above in [transport_factors]) If the road type does not occur in the leg, simply put 0 Note that the total should be 1 (there are not checks to ensure this, so you need to make sure you do this correctly) road_types = ['highway', 'city']","title":"road_type_mix"},{"location":"scenario/#mix","text":"","title":"mix"},{"location":"scenario/#vehicle_2","text":"These parameters define the scenario's vehicle. If you want profiles for several vehicles, run separate scenarios.","title":"vehicle"},{"location":"scenario/#name","text":"This is the name of the vehicle, which will be checked to see if trips and locations are actually declared.","title":"name"},{"location":"scenario/#base_location","text":"not relevant for cars","title":"base_location"},{"location":"scenario/#yearly_kilometrage","text":"Not relevant for cars, as it is built bottom-up","title":"yearly_kilometrage"},{"location":"scenario/#kilometers_column_for_consumption","text":"","title":"kilometers_column_for_consumption"},{"location":"scenario/#use_weighted","text":"","title":"use_weighted"},{"location":"scenario/#battery_capacity","text":"","title":"battery_capacity"},{"location":"scenario/#solar_panel_size_kwp","text":"","title":"solar_panel_size_kWp"},{"location":"scenario/#base_consumption_per_km","text":"electricity_kWh = 0.76 gasoline_litres = 0.3399 diesel_litres = 0.2917 hydrogen_kg = 0.0398 CNG_kg = 0.2415 LNG_kg = 0.2415","title":"base_consumption_per_km"},{"location":"scenario/#trips","text":"","title":"trips"},{"location":"scenario/#vehicle_3","text":"","title":"vehicle"},{"location":"scenario/#legs_1","text":"","title":"legs"},{"location":"scenario/#time_between_legs","text":"This is the time spent at each interim location (same units as used general)","title":"time_between_legs"},{"location":"scenario/#percentage_station_users","text":"","title":"percentage_station_users"},{"location":"scenario/#start_probabilities","text":"","title":"start_probabilities"},{"location":"scenario/#repeated_sequence","text":"","title":"repeated_sequence"},{"location":"scenario/#repetition_amounts","text":"","title":"repetition_amounts"},{"location":"scenario/#time_between_repetitions","text":"","title":"time_between_repetitions"},{"location":"scenario/#mobility_module","text":"","title":"mobility_module"},{"location":"scenario/#day_start_hour","text":"This parameter defines the start of the day for the scenario. It is chosen so that there are no movements during that hour number. It represents the shift from midnight, so a day start hour of 5 means that the day starts at hour 5 (i.e. 05.00). The idea is to choose an hour that is logical for the users/matches their patterns. This is connected to the day types , as a given day will correspond to a day type. For example, the hours between 00:00 and 05:00 on a Saturday belong to the Thursday before and are as such on a week day (as opposed to a weekend day).","title":"day_start_hour"},{"location":"scenario/#compute_start_location_split","text":"","title":"compute_start_location_split"},{"location":"scenario/#day_types","text":"","title":"day_types"},{"location":"scenario/#mobility_quantities","text":"","title":"mobility_quantities"},{"location":"scenario/#battery_space_shift_quantities","text":"","title":"battery_space_shift_quantities"},{"location":"scenario/#location_connections_headers","text":"","title":"location_connections_headers"},{"location":"scenario/#mobility_index_names","text":"","title":"mobility_index_names"},{"location":"scenario/#kilometers_driven_headers","text":"","title":"kilometers_driven_headers"},{"location":"scenario/#holiday_weeks","text":"","title":"holiday_weeks"},{"location":"scenario/#number_of_holiday_weeks","text":"We need to provide the number of holliday weeks seprately, as counting the elements of the list above might not work, such as when the above list contains weeks 1 and 53 (which just represent the fact that years don't necessarily start and/or end at the start/end of a week).","title":"number_of_holiday_weeks"},{"location":"scenario/#holiday_departures_in_weekend_week_numbers","text":"","title":"holiday_departures_in_weekend_week_numbers"},{"location":"scenario/#holiday_returns_in_weekend_week_numbers","text":"","title":"holiday_returns_in_weekend_week_numbers"},{"location":"scenario/#work_hours_in_a_work_day","text":"","title":"work_hours_in_a_work_day"},{"location":"scenario/#hours_worked_per_work_week","text":"","title":"hours_worked_per_work_week"},{"location":"scenario/#hours_in_a_standard_work_week","text":"","title":"hours_in_a_standard_work_week"},{"location":"scenario/#percentage_working_on_a_work_week","text":"","title":"percentage_working_on_a_work_week"},{"location":"scenario/#worked_hours_per_year","text":"","title":"worked_hours_per_year"},{"location":"scenario/#leisure_trips_per_weekend","text":"","title":"leisure_trips_per_weekend"},{"location":"scenario/#leisure_trips_per_week_outside_weekends","text":"","title":"leisure_trips_per_week_outside_weekends"},{"location":"scenario/#maximal_fill_percentage_leisure_trips_on_non_work_weekdays","text":"","title":"maximal_fill_percentage_leisure_trips_on_non_work_weekdays"},{"location":"scenario/#weekday_leisure_trips","text":"","title":"weekday_leisure_trips"},{"location":"scenario/#percentage_of_weekday_leisure_trips_on_a_work_day","text":"","title":"percentage_of_weekday_leisure_trips_on_a_work_day"},{"location":"scenario/#weekend_trips_per_year","text":"","title":"weekend_trips_per_year"},{"location":"scenario/#holiday_trips_taken","text":"","title":"holiday_trips_taken"},{"location":"scenario/#time_spent_at_holiday_destination","text":"","title":"time_spent_at_holiday_destination"},{"location":"scenario/#trips_per_day_type","text":"For vehicles other than cars, we assume that there is one trip per day type. This is where we match the trips to their day type","title":"trips_per_day_type"},{"location":"scenario/#transport_factors","text":"","title":"transport_factors"},{"location":"scenario/#road_types","text":"","title":"road_types"},{"location":"scenario/#weights","text":"","title":"weights"},{"location":"scenario/#weather","text":"","title":"weather"},{"location":"scenario/#weather_factors_table_root_name","text":"","title":"weather_factors_table_root_name"},{"location":"scenario/#source_data","text":"","title":"source_data"},{"location":"scenario/#start_year","text":"","title":"start_year"},{"location":"scenario/#end_year","text":"","title":"end_year"},{"location":"scenario/#quantities","text":"","title":"quantities"},{"location":"scenario/#raw_data_folder","text":"The following define the area over which the raw weather data will be downloaded. The corresponding in the processed weather database is below.","title":"raw_data_folder"},{"location":"scenario/#latitude_min","text":"","title":"latitude_min"},{"location":"scenario/#latitude_max","text":"","title":"latitude_max"},{"location":"scenario/#longitude_min","text":"","title":"longitude_min"},{"location":"scenario/#longitude_max","text":"","title":"longitude_max"},{"location":"scenario/#processed_data","text":"","title":"processed_data"},{"location":"scenario/#raw_data_folder_1","text":"","title":"raw_data_folder"},{"location":"scenario/#processed_folder","text":"","title":"processed_folder"},{"location":"scenario/#weather_database_file_name","text":"","title":"weather_database_file_name"},{"location":"scenario/#chunk_size","text":"This parameter is there to avoid issues when writing a too large DataFrame at once (instead, we split it into chunks).","title":"chunk_size"},{"location":"scenario/#quantities_1","text":"","title":"quantities"},{"location":"scenario/#kelvin_to_celsius","text":"","title":"KELVIN_TO_CELSIUS"},{"location":"scenario/#quantity_tags","text":"","title":"quantity_tags"},{"location":"scenario/#quantity_processed_names","text":"","title":"quantity_processed_names"},{"location":"scenario/#cumulative_quantity_processed_names","text":"","title":"cumulative_quantity_processed_names"},{"location":"scenario/#cumulative_quantities","text":"","title":"cumulative_quantities"},{"location":"scenario/#queries_for_cumulative_quantities","text":"","title":"queries_for_cumulative_quantities"},{"location":"scenario/#temperature_quantities","text":"","title":"temperature_quantities"},{"location":"scenario/#processed_index_tags","text":"These define the area of the processed data in the weather database","title":"processed_index_tags"},{"location":"scenario/#latitude_min_1","text":"","title":"latitude_min"},{"location":"scenario/#latitude_max_1","text":"","title":"latitude_max"},{"location":"scenario/#longitude_min_1","text":"","title":"longitude_min"},{"location":"scenario/#longitude_max_1","text":"","title":"longitude_max"},{"location":"scenario/#coordinate_step","text":"","title":"coordinate_step"},{"location":"scenario/#ev_tool","text":"Parameters for the EV tool data from geotab","title":"EV_tool"},{"location":"scenario/#ev_tool_url","text":"","title":"EV_tool_url"},{"location":"scenario/#user_agent","text":"","title":"user_agent"},{"location":"scenario/#efficiency_curve_script_index","text":"","title":"efficiency_curve_script_index"},{"location":"scenario/#data_splitter","text":"","title":"data_splitter"},{"location":"scenario/#file_name","text":"","title":"file_name"},{"location":"scenario/#groupfile_name","text":"","title":"groupfile_name"},{"location":"scenario/#folder","text":"","title":"folder"},{"location":"scenario/#efficiency_factor_column_name","text":"","title":"efficiency_factor_column_name"},{"location":"scenario/#charging","text":"","title":"charging"},{"location":"scenario/#price_reaction_exponent","text":"","title":"price_reaction_exponent"},{"location":"scenario/#desirability_reaction_exponent","text":"","title":"desirability_reaction_exponent"},{"location":"scenario/#charging_sessions","text":"","title":"charging_sessions"},{"location":"scenario/#resolution","text":"","title":"resolution"},{"location":"scenarios_module/","text":"Generate profiles from sessions","title":"Scenarios"},{"location":"scenarios_module/#generate-profiles-from-sessions","text":"","title":"Generate profiles from sessions"},{"location":"using/","text":"Installation pip install ChaProEV Running The standard way of running the model is to run a case with a code such as the following: from ChaProEV import ChaProEV if __name__ == '__main__': case_name: str = 'my_case' ChaProEV.run_ChaProEV(case_name) where you need to give a name to your case ('my_case') in the example above. To run your case, you need to provide general parameters, scenario parameters, variant parameters, and (optional) inputs. ## General parameters The file containing the general parameters (common for all acenarios) is in your root working folder as is called ChaProEV.toml (click on link for details). ## Scenarios ## Variants ## Inputs","title":"How to use"},{"location":"using/#installation","text":"pip install ChaProEV","title":"Installation"},{"location":"using/#running","text":"The standard way of running the model is to run a case with a code such as the following: from ChaProEV import ChaProEV if __name__ == '__main__': case_name: str = 'my_case' ChaProEV.run_ChaProEV(case_name) where you need to give a name to your case ('my_case') in the example above. To run your case, you need to provide general parameters, scenario parameters, variant parameters, and (optional) inputs. ## General parameters The file containing the general parameters (common for all acenarios) is in your root working folder as is called ChaProEV.toml (click on link for details). ## Scenarios ## Variants ## Inputs","title":"Running"},{"location":"variants/","text":"For more details, see the documentation of the make_variants.py code file","title":"Variants"},{"location":"weather/","text":"Range and temperature","title":"Weather"},{"location":"weather/#range-and-temperature","text":"","title":"Range and temperature"},{"location":"writing/","text":"","title":"Writing"}]}