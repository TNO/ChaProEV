{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ChaProEV","title":"Home"},{"location":"#chaproev","text":"","title":"ChaProEV"},{"location":"car_home_own_driveway_splits/","text":"","title":"Car home own driveway splits"},{"location":"charging/","text":"More Even more List of relevant files and modules ChaProEV.py Where you run the model scenarios folder This folder contains scenario configuration files. There is one per scenario, containing all necessary parameters to run the scenario. To add a scenario, copy one of the existing files and add/remove/modify parameters as required, including the first parameter, which is the scenario name, which should be the same as the file name (it might work with another name, but this is not tested and there is no reason to have different names for the same scenario). These scenario files contain the following sections: - unit_conversions: Parameters to convert units - files: File-related parameters (folders, output type choices, etc.) - colors: Color-related parameters(defining new ones, as well as color bars) - time: Time-related parameters and constants needed in formulas - run: Parameters related to the run, such as timing, and elements such as locations, vehicles, legs, trips, etc. - weather: Parameters related to the weather, such as elements to define what we want to download from various sources, where we store weather data, how we process it, or how we want to label quantities - plots: Parameters for plots (colors, sizes, etc.) define.py: This module defines and declares classes for the different objects that define the system (the parameters/defintions come from a parameters file), namely: 1. Legs: Legs are point-to-point vehicle movements (i.e. movements where the vehicle goes from a start location and ends/stops at an end location). 2. Vehicles: Each vehicle type (or subtype) is defined in this class. weather.py This module contains functions related to weather data and factors. The weather data is pulled from the CDS (Climate Data Store) ERA-5 weather data from the Copernicus institute . This data contains many quantities (such as temperature, precipitation, or solar radiation) at an hourly level (starting in 1950) for the whole world, at a one-decimal resolution for latitudes and longitudes. Note that the data sometimes has trailing digits, but the resolution still seems to be to the first decimal. This is the reason why we round the coordinate values in our processing functions. It contains the following functions: 1. download_cds_weather_quantity: Downloads CDS ERA-5 weather data for a given quantity in a given area. 2. download_all_cds_weather_data: Downloads all the necessary CDS weather data. 3. make_weather_dataframe: This function makes a weather DataFrame into one we can use by removing empty data and processing data into forms useful for the model. 4. write_weather_database\" This function writes the weather database. 5. get_hourly_values: This function takes a Dataframe for a given weather quantity. If this is a cumulative quantity, it adds hourly values to it. 6. get_all_hourly_values: This functions adds hourly values to cumulative quantities in the weather database. 7. get_EV_tool_data: : This gets the temperature efficiency data from the EV tool made by geotab . 8. temperature_efficiency_factor: This function returns the temperature efficiency factor that corrects the baseline vehicle efficiency. 9. plot_temperature_efficiency: Plots the temperature efficiency correction factor (source data versus interpolation)of electric vehicles. 10. get_run_location_weather_quantity: Returns a chosen weather quantity for a given location and a given runtime. 11. get_run_weather_data: Fetches the weather data and efficiency factors and puts it into a table that is saved to files/databases. 12. solar_efficiency_factor: This gives us the efficiency factor of solar panels (i.e. how much of the solar radiation is converted into electricity). THIS IS A PLACEHOLDER FUNCTION 13. setup_weather: This runs all the functions necessary to get the run weather factors for a given case. 14. get_location_weather_quantity: * Returns the value a a chosen weather quantity for a given location and time tag. run_time.py: This module defines time structures. It contains the following functions: 1. get_time_range: This function returns the time range of the run, and the associated hour numbers, based on values found in the parameters file. 2. get_time_stamped_dataframe: This function creates a DataFrame with the timestamps of the run as index (and hour numbers as a column). 3. get_day_type: Tells us the date type of a given time_tag. 4. add_day_type_to_time_stamped_dataframe: Adds a column with the date type to a time-stamped_dataframe writing.py: This contains functions related to writting outputs. It contains the following functions: 1. write_scenario_parameters: This function writes the scenario parameters to the output files (either as separate files, or as tables/sheets in groupfiles.) mobility.py: This module computes the various functions related to mobility. It contains the following functions: 1. get_trip_probabilities_per_day_type: This function computes the trip probabilities per day type. Temperature efficiency This function returns the temperature efficiency factor that corrects the baseline vehicle efficiency. It uses a data file (extracted from EV tool made by geotab . This information is based on 5.2 million trips by 4200 vehicles. The degree 6 polynomial fit is: $$ C(T)=0.7078+0.01751\\cdot T+0.0001611\\cdot T^2-1.036\\cdot 10^{-5}\\cdot T^3 -3.581\\cdot 10^{-7}\\cdot T^4+1.746\\cdot 10^{-9}\\cdot T^5 +1.07\\cdot10^{-10}\\cdot T^6 $$ where T is the ambient temparture (in the weather data, it's the temperature at 2 meters), and C is the efficiency correction factor. Plotting the fit verus the data shows that thisi a great fit:","title":"Charging"},{"location":"charging/#more","text":"","title":"More"},{"location":"charging/#even-more","text":"","title":"Even more"},{"location":"charging/#list-of-relevant-files-and-modules","text":"","title":"List of relevant files and modules"},{"location":"charging/#chaproevpy","text":"Where you run the model","title":"ChaProEV.py"},{"location":"charging/#scenarios-folder","text":"This folder contains scenario configuration files. There is one per scenario, containing all necessary parameters to run the scenario. To add a scenario, copy one of the existing files and add/remove/modify parameters as required, including the first parameter, which is the scenario name, which should be the same as the file name (it might work with another name, but this is not tested and there is no reason to have different names for the same scenario). These scenario files contain the following sections: - unit_conversions: Parameters to convert units - files: File-related parameters (folders, output type choices, etc.) - colors: Color-related parameters(defining new ones, as well as color bars) - time: Time-related parameters and constants needed in formulas - run: Parameters related to the run, such as timing, and elements such as locations, vehicles, legs, trips, etc. - weather: Parameters related to the weather, such as elements to define what we want to download from various sources, where we store weather data, how we process it, or how we want to label quantities - plots: Parameters for plots (colors, sizes, etc.)","title":"scenarios folder"},{"location":"charging/#definepy","text":"This module defines and declares classes for the different objects that define the system (the parameters/defintions come from a parameters file), namely: 1. Legs: Legs are point-to-point vehicle movements (i.e. movements where the vehicle goes from a start location and ends/stops at an end location). 2. Vehicles: Each vehicle type (or subtype) is defined in this class.","title":"define.py:"},{"location":"charging/#weatherpy","text":"This module contains functions related to weather data and factors. The weather data is pulled from the CDS (Climate Data Store) ERA-5 weather data from the Copernicus institute . This data contains many quantities (such as temperature, precipitation, or solar radiation) at an hourly level (starting in 1950) for the whole world, at a one-decimal resolution for latitudes and longitudes. Note that the data sometimes has trailing digits, but the resolution still seems to be to the first decimal. This is the reason why we round the coordinate values in our processing functions. It contains the following functions: 1. download_cds_weather_quantity: Downloads CDS ERA-5 weather data for a given quantity in a given area. 2. download_all_cds_weather_data: Downloads all the necessary CDS weather data. 3. make_weather_dataframe: This function makes a weather DataFrame into one we can use by removing empty data and processing data into forms useful for the model. 4. write_weather_database\" This function writes the weather database. 5. get_hourly_values: This function takes a Dataframe for a given weather quantity. If this is a cumulative quantity, it adds hourly values to it. 6. get_all_hourly_values: This functions adds hourly values to cumulative quantities in the weather database. 7. get_EV_tool_data: : This gets the temperature efficiency data from the EV tool made by geotab . 8. temperature_efficiency_factor: This function returns the temperature efficiency factor that corrects the baseline vehicle efficiency. 9. plot_temperature_efficiency: Plots the temperature efficiency correction factor (source data versus interpolation)of electric vehicles. 10. get_run_location_weather_quantity: Returns a chosen weather quantity for a given location and a given runtime. 11. get_run_weather_data: Fetches the weather data and efficiency factors and puts it into a table that is saved to files/databases. 12. solar_efficiency_factor: This gives us the efficiency factor of solar panels (i.e. how much of the solar radiation is converted into electricity). THIS IS A PLACEHOLDER FUNCTION 13. setup_weather: This runs all the functions necessary to get the run weather factors for a given case. 14. get_location_weather_quantity: * Returns the value a a chosen weather quantity for a given location and time tag.","title":"weather.py"},{"location":"charging/#run_timepy","text":"This module defines time structures. It contains the following functions: 1. get_time_range: This function returns the time range of the run, and the associated hour numbers, based on values found in the parameters file. 2. get_time_stamped_dataframe: This function creates a DataFrame with the timestamps of the run as index (and hour numbers as a column). 3. get_day_type: Tells us the date type of a given time_tag. 4. add_day_type_to_time_stamped_dataframe: Adds a column with the date type to a time-stamped_dataframe","title":"run_time.py:"},{"location":"charging/#writingpy","text":"This contains functions related to writting outputs. It contains the following functions: 1. write_scenario_parameters: This function writes the scenario parameters to the output files (either as separate files, or as tables/sheets in groupfiles.)","title":"writing.py:"},{"location":"charging/#mobilitypy","text":"This module computes the various functions related to mobility. It contains the following functions: 1. get_trip_probabilities_per_day_type: This function computes the trip probabilities per day type.","title":"mobility.py:"},{"location":"charging/#temperature-efficiency","text":"This function returns the temperature efficiency factor that corrects the baseline vehicle efficiency. It uses a data file (extracted from EV tool made by geotab . This information is based on 5.2 million trips by 4200 vehicles. The degree 6 polynomial fit is: $$ C(T)=0.7078+0.01751\\cdot T+0.0001611\\cdot T^2-1.036\\cdot 10^{-5}\\cdot T^3 -3.581\\cdot 10^{-7}\\cdot T^4+1.746\\cdot 10^{-9}\\cdot T^5 +1.07\\cdot10^{-10}\\cdot T^6 $$ where T is the ambient temparture (in the weather data, it's the temperature at 2 meters), and C is the efficiency correction factor. Plotting the fit verus the data shows that thisi a great fit:","title":"Temperature efficiency"},{"location":"consumption/","text":"","title":"Consumption"},{"location":"define/","text":"Classes Leg This class defines the legs and their properties, from a scenario file that contains a list of instances and their properties. Legs are point-to-point vehicle movements (i.e. movements where the vehicle goes from a start location and ends/stops at an end location). Parameters The parameters of a leg are: Name: The name of the leg Vehicle: The vehicle that runs the leg. If this does not correspond to the scenario vehicle name , then the leg is not declared. Note that when running a scenario, you select one vehicle, so this is in principle not necessary. The reason for having this is to allow the user to copy the baseline file and keep the location definitions that are not used for this scenario but might be so for another, thereby reducing the need for changes between scenarios. Distance: The distance driven during the leg (in kilometers) Duration: How long it takes to drive the leg (in hours) Hour in day factors: These factors add a correction to the vehicle consumption that depend on the hour in day (the first is for 00:00 to 00:59, last for 23:00 to 23:59). Note that these are actual hours, not hours in the user day (which can start and end at other moments than midnight). This is used to take into account things like traffic jams. The default value is 1. This factor is a placeholder and is currently not in use. Location This class defines the locations where the vehicles are and their properties, from a scenario file that contains a list of instances and their proper. Parameters The parameters of a location are: Name : The name of the location. Vehicle: The vehicle that uses the location. If this does not correspond to the scenario vehicle name , then the trip is not declared. Note that when running a scenario, you select one vehicle, so this is in principle not necessary. The reason for having this is to allow the user to copy the baseline file and keep the location definitions that are not used for this scenario but might be so for another, thereby reducing the need for changes between scenarios. Connectivity: A value between 0 and 1 (0% to 100%) that tells the probability that a vehicle parked at this location is connected to a charger. Charging power: The (peak) charging power of the charger at this location (in kW). Charger efficiency: A value between 0 and 1 (0% to 100%) that tells how much of the power drawn from the network is delivered to the battery of the vehicle. Latitude: The latitude of the location. This factor is a placeholder and is currently not in use. Longitude: The longitude of the location. This factor is a placeholder and is currently not in use. Base charging price: The base/reference (i.e. before flexibility/temporal changes) charging price at this location, in \u20ac/kWh. This factor is a placeholder and is currently not in use. Charging desirability: A value between 0 and 1 (0% to 100%) that tells how much the users like to charge at this location. This factor is a placeholder and is currently not in use. Percentage in location at run start: A value between 0 and 1 (0% to 100%) that tells which percentage of the vehicles start the run there. This is used if we will that in directly instead of computing it. The decision t use this is controlled by the compute_start_location_split parameter in the mobility module. Trip This class defines the trips and their properties, from a scenario file that contains a list of instances and their properties. Trips are collections of legs that take place on a given day. Note that this day does not necessarily start (and end) at midnight, but can start (and end) at an hour that is more logical/significant for the vehicle user (it could for example be 05:00 for car drivers). This day start hour parameter is universal for all trips This value is set in the scenario files. Parameters Name : The name of the trip. Vehicle: The vehicle that does the trip. If this does not correspond to the scenario vehicle name , then the trip is not declared. Note that when running a scenario, you select one vehicle, so this is in principle not necessary. The reason for having this is to allow the user to copy the baseline file and keep the trip definitions that are not used for this scenario but might be so for another, thereby reducing the need for changes between scenarios. Legs: A list of the legs in the trip. Time between legs: A list of the time spent at the arrival locations between each leg (in hours). Percentage station users: A value between 0 and 1 (0% to 100%) that tells us which percentage of users use fast charging stations. This factor is a placeholder and is currently not in use. Start probabilities: A list of values between 0 and 1 (0%-100%) adding up to 1/100% that tells us what the probability of starting the trip is at a given hour. Note that the hours start at day start hour , not at midnight. Repeated sequence: A list of repeated legs (which should follow each other) that form a repeated sequence. Repetition amounts: How often the repeated sequence is repeated. This is a list, with one value per leg repetition (the nth element corresponds to the nth appearance of the sequence in the leg list). Time between repetitions: The time between repetitions of each repeated sequence (in hours). This is a list, with one value per leg repetition (the nth element corresponds to the nth appearance of the sequence in the leg list). Mobility matrix The main aim of the trip initialization/declaration is to create a mobility matrix for the trip. This mobility matrix has, for all combinations of possible start and end locations (i.e. locations connected by a leg in the trip) and for each hour in day number (starting at the day start hour ), the following quantities: 1. Duration: The duration (in hours) of a leg between the start location and the end location. 2. Distance: The distance (in kilometers) of a leg between the start location. 3. Weighted distance: The weighted distance (in kilometers) of a leg between the start location and the end location. This corresponds to using different road types , with given weights and given mixes to account for the fact that vehicles consume more on some road types. 4. Departures amount : The chance that a vehicle, in a given hour, leaves the start location, going to the end location (amount and chance are equivalent here, as we compute on an individual vehicle basis). 5. Departures kilometers: The kilometers driven by vehicles leaving the start location at a given hour and going to the end location. This is given by the departures amount times the distance. 6. Departures weighted kilometers: The weighted (by road type) kilometers driven by vehicles leaving the start location at a given hour and going to the end location. This is given by the departures amount times the weighted distance. 7. Arrivals amount : The chance that a vehicle, in a given hour, arrives to the end location, having started the start location (amount and chance are equivalent here, as we compute on an individual vehicle basis). 8. Arrivals kilometers: The kilometers driven by vehicles arriving to the end location at a given hour, having started at the start location. This is given by the arrivals amount times the distance. 9. Arrivals weighted kilometers: The weighted (by road type) kilometers driven by vehicles arriving to the end location at a given hour, having started at the start location. This is given by the arrivals amount times the weighted distance. The model also produces a version of this mobility matrix for the whole run (which is essentially a copy of the above matrix). This run mobility matrix is the mobility matrix if the trip had a probability of 1 for the whole run. Leg repetitions Is repeat of leg or two legs???? [0, 5, 5, 0] If next leg is also repeated/still has repeats left, then it is repeated after the leg in question so when putting a leg, check if it is repeated. If so, check if the next is repeated, until you have no repeats (or end the list). Add on of each repeated legs then number of repeats goes down by one and redo Have one trip per day type for non-cars Reference to day start hour cross-links with scenario","title":"Define"},{"location":"define/#classes","text":"","title":"Classes"},{"location":"define/#leg","text":"This class defines the legs and their properties, from a scenario file that contains a list of instances and their properties. Legs are point-to-point vehicle movements (i.e. movements where the vehicle goes from a start location and ends/stops at an end location).","title":"Leg"},{"location":"define/#parameters","text":"The parameters of a leg are: Name: The name of the leg Vehicle: The vehicle that runs the leg. If this does not correspond to the scenario vehicle name , then the leg is not declared. Note that when running a scenario, you select one vehicle, so this is in principle not necessary. The reason for having this is to allow the user to copy the baseline file and keep the location definitions that are not used for this scenario but might be so for another, thereby reducing the need for changes between scenarios. Distance: The distance driven during the leg (in kilometers) Duration: How long it takes to drive the leg (in hours) Hour in day factors: These factors add a correction to the vehicle consumption that depend on the hour in day (the first is for 00:00 to 00:59, last for 23:00 to 23:59). Note that these are actual hours, not hours in the user day (which can start and end at other moments than midnight). This is used to take into account things like traffic jams. The default value is 1. This factor is a placeholder and is currently not in use.","title":"Parameters"},{"location":"define/#location","text":"This class defines the locations where the vehicles are and their properties, from a scenario file that contains a list of instances and their proper.","title":"Location"},{"location":"define/#parameters_1","text":"The parameters of a location are: Name : The name of the location. Vehicle: The vehicle that uses the location. If this does not correspond to the scenario vehicle name , then the trip is not declared. Note that when running a scenario, you select one vehicle, so this is in principle not necessary. The reason for having this is to allow the user to copy the baseline file and keep the location definitions that are not used for this scenario but might be so for another, thereby reducing the need for changes between scenarios. Connectivity: A value between 0 and 1 (0% to 100%) that tells the probability that a vehicle parked at this location is connected to a charger. Charging power: The (peak) charging power of the charger at this location (in kW). Charger efficiency: A value between 0 and 1 (0% to 100%) that tells how much of the power drawn from the network is delivered to the battery of the vehicle. Latitude: The latitude of the location. This factor is a placeholder and is currently not in use. Longitude: The longitude of the location. This factor is a placeholder and is currently not in use. Base charging price: The base/reference (i.e. before flexibility/temporal changes) charging price at this location, in \u20ac/kWh. This factor is a placeholder and is currently not in use. Charging desirability: A value between 0 and 1 (0% to 100%) that tells how much the users like to charge at this location. This factor is a placeholder and is currently not in use. Percentage in location at run start: A value between 0 and 1 (0% to 100%) that tells which percentage of the vehicles start the run there. This is used if we will that in directly instead of computing it. The decision t use this is controlled by the compute_start_location_split parameter in the mobility module.","title":"Parameters"},{"location":"define/#trip","text":"This class defines the trips and their properties, from a scenario file that contains a list of instances and their properties. Trips are collections of legs that take place on a given day. Note that this day does not necessarily start (and end) at midnight, but can start (and end) at an hour that is more logical/significant for the vehicle user (it could for example be 05:00 for car drivers). This day start hour parameter is universal for all trips This value is set in the scenario files.","title":"Trip"},{"location":"define/#parameters_2","text":"Name : The name of the trip. Vehicle: The vehicle that does the trip. If this does not correspond to the scenario vehicle name , then the trip is not declared. Note that when running a scenario, you select one vehicle, so this is in principle not necessary. The reason for having this is to allow the user to copy the baseline file and keep the trip definitions that are not used for this scenario but might be so for another, thereby reducing the need for changes between scenarios. Legs: A list of the legs in the trip. Time between legs: A list of the time spent at the arrival locations between each leg (in hours). Percentage station users: A value between 0 and 1 (0% to 100%) that tells us which percentage of users use fast charging stations. This factor is a placeholder and is currently not in use. Start probabilities: A list of values between 0 and 1 (0%-100%) adding up to 1/100% that tells us what the probability of starting the trip is at a given hour. Note that the hours start at day start hour , not at midnight. Repeated sequence: A list of repeated legs (which should follow each other) that form a repeated sequence. Repetition amounts: How often the repeated sequence is repeated. This is a list, with one value per leg repetition (the nth element corresponds to the nth appearance of the sequence in the leg list). Time between repetitions: The time between repetitions of each repeated sequence (in hours). This is a list, with one value per leg repetition (the nth element corresponds to the nth appearance of the sequence in the leg list).","title":"Parameters"},{"location":"define/#mobility-matrix","text":"The main aim of the trip initialization/declaration is to create a mobility matrix for the trip. This mobility matrix has, for all combinations of possible start and end locations (i.e. locations connected by a leg in the trip) and for each hour in day number (starting at the day start hour ), the following quantities: 1. Duration: The duration (in hours) of a leg between the start location and the end location. 2. Distance: The distance (in kilometers) of a leg between the start location. 3. Weighted distance: The weighted distance (in kilometers) of a leg between the start location and the end location. This corresponds to using different road types , with given weights and given mixes to account for the fact that vehicles consume more on some road types. 4. Departures amount : The chance that a vehicle, in a given hour, leaves the start location, going to the end location (amount and chance are equivalent here, as we compute on an individual vehicle basis). 5. Departures kilometers: The kilometers driven by vehicles leaving the start location at a given hour and going to the end location. This is given by the departures amount times the distance. 6. Departures weighted kilometers: The weighted (by road type) kilometers driven by vehicles leaving the start location at a given hour and going to the end location. This is given by the departures amount times the weighted distance. 7. Arrivals amount : The chance that a vehicle, in a given hour, arrives to the end location, having started the start location (amount and chance are equivalent here, as we compute on an individual vehicle basis). 8. Arrivals kilometers: The kilometers driven by vehicles arriving to the end location at a given hour, having started at the start location. This is given by the arrivals amount times the distance. 9. Arrivals weighted kilometers: The weighted (by road type) kilometers driven by vehicles arriving to the end location at a given hour, having started at the start location. This is given by the arrivals amount times the weighted distance. The model also produces a version of this mobility matrix for the whole run (which is essentially a copy of the above matrix). This run mobility matrix is the mobility matrix if the trip had a probability of 1 for the whole run.","title":"Mobility matrix"},{"location":"define/#leg-repetitions","text":"Is repeat of leg or two legs???? [0, 5, 5, 0] If next leg is also repeated/still has repeats left, then it is repeated after the leg in question so when putting a leg, check if it is repeated. If so, check if the next is repeated, until you have no repeats (or end the list). Add on of each repeated legs then number of repeats goes down by one and redo Have one trip per day type for non-cars Reference to day start hour cross-links with scenario","title":"Leg repetitions"},{"location":"general_parameters/","text":"Purpose The purpose of the ChaProEV.toml file is to set parameters that are common for all your scenarios. This page describes the various parameters. variants The variants section of the configuration file sets parameters to create scenario variants (see that page for details). 1. use_variants\" Setting the use_variants parameters to true creates variants, while setting it to false skips variant creation althogether. 2. csv_version: Setting the csv_version to true parameters makes you use csv files to define your variants (in a folder within the variants folder: this folder needs to have the same name as your case). Setting it to false makes you use a toml file in the variants folder (case_name.toml). 3. use_years_in_profiles: This is used to create different variants per year when doing car home own driveway and street parking splits parallel_processing This parallel processing section of the configuration file sets parameters to manage the parallel processing/multiprocessing of the model (which reduces the model run time, see link for details). [parallel_processing] 1. set_amount_of_processes: set this as false if you want the amount of parallel processes to be determined by the model (via the multiprocessing standard library of Python ). Set this to true if you want to set the amount of processes yourself. 2. amount_for_scenarios: If you put true in set_amount_of_processes, provide a number of parallel processes here to run scenarios in parallel. 3. amount_for_pickle_saves: If you put true in set_amount_of_processes, provide a number of parallel processes here to save the pickle output saves to other formats in parallel (see writing module for details). interim_files This concerns parameters for saving intermediary results to files. 1. pickle: Set this to true to save interim results to pickle files. Set this to false not to do this. 2. consumption_tables_frequencies: Provide a list of consumption tables frequencies (see consumption module ). The default is the following list ['hourly', 'daily', 'weekly', 'monthly', 'yearly'] save_consumption_table: Provide a list of booleans (true or false) to save a given frequency to file (this list needs to have the same length as the above list): true save a file for that frequency and false does not.","title":"Purpose"},{"location":"general_parameters/#purpose","text":"The purpose of the ChaProEV.toml file is to set parameters that are common for all your scenarios. This page describes the various parameters.","title":"Purpose"},{"location":"general_parameters/#variants","text":"The variants section of the configuration file sets parameters to create scenario variants (see that page for details). 1. use_variants\" Setting the use_variants parameters to true creates variants, while setting it to false skips variant creation althogether. 2. csv_version: Setting the csv_version to true parameters makes you use csv files to define your variants (in a folder within the variants folder: this folder needs to have the same name as your case). Setting it to false makes you use a toml file in the variants folder (case_name.toml). 3. use_years_in_profiles: This is used to create different variants per year when doing car home own driveway and street parking splits","title":"variants"},{"location":"general_parameters/#parallel_processing","text":"This parallel processing section of the configuration file sets parameters to manage the parallel processing/multiprocessing of the model (which reduces the model run time, see link for details). [parallel_processing] 1. set_amount_of_processes: set this as false if you want the amount of parallel processes to be determined by the model (via the multiprocessing standard library of Python ). Set this to true if you want to set the amount of processes yourself. 2. amount_for_scenarios: If you put true in set_amount_of_processes, provide a number of parallel processes here to run scenarios in parallel. 3. amount_for_pickle_saves: If you put true in set_amount_of_processes, provide a number of parallel processes here to save the pickle output saves to other formats in parallel (see writing module for details).","title":"parallel_processing"},{"location":"general_parameters/#interim_files","text":"This concerns parameters for saving intermediary results to files. 1. pickle: Set this to true to save interim results to pickle files. Set this to false not to do this. 2. consumption_tables_frequencies: Provide a list of consumption tables frequencies (see consumption module ). The default is the following list ['hourly', 'daily', 'weekly', 'monthly', 'yearly'] save_consumption_table: Provide a list of booleans (true or false) to save a given frequency to file (this list needs to have the same length as the above list): true save a file for that frequency and false does not.","title":"interim_files"},{"location":"make_variants/","text":"","title":"Make variants"},{"location":"mobility/","text":"Mobility Module parameters","title":"Mobility"},{"location":"mobility/#mobility","text":"","title":"Mobility"},{"location":"mobility/#module-parameters","text":"","title":"Module parameters"},{"location":"muliprocessing/","text":"uses several cores at the same time scenarios: ty.List[ty.Dict] = load_scenarios(case_name) number_of_parallel_processes: int = general_parameters[ 'parallel_processing' ]['number_of_parallel_processes']['for_scenarios'] with Pool(number_of_parallel_processes) as scenarios_pool: scenarios_pool.starmap( run_scenario, zip(scenarios, repeat(case_name), repeat(general_parameters)), ) speeds up considerably set this as false if you want the amount of parallel processes to be determined by the model (via the multiprocessing standard library of Python","title":"Muliprocessing"},{"location":"running_model/","text":"Multirpocessing scenarios: ty.List[ty.Dict] = load_scenarios(case_name) number_of_parallel_processes: int = general_parameters[ 'parallel_processing' ]['number_of_parallel_processes']['for_scenarios'] with Pool(number_of_parallel_processes) as scenarios_pool: scenarios_pool.starmap( run_scenario, zip(scenarios, repeat(case_name), repeat(general_parameters)), ) speeds up considerably","title":"Running model"},{"location":"scenario/","text":"Scenario file description This page describes the elements of the scenario file run Run parameters give the elements to produce the time tags of the run range. use_day_types_in_charge_computing If set to true, the charging computations will be done per day type rather than for all days of the run, which fastens the computations. start This part gives the year, month, day, hour, and minute of the start of the computations. It is best to set this to a day hour start for consistency and then cut off the start for display (see below). For example, start on 31/12/2019 at 05:00 if your day start hour is 05:00 and if you want to show results starting on 1/1/2020 at 00:00. end This part gives the year, month, day, hour, and minute of the end of the computations. Note that the end time tag is not included in the run, so put 1/1/2021 at 00:00 if you want to compute for 2020. display_start This is the first time tag you want to show in your end results. display_end This is the first time tag that does not appear in your displayed results. frequency The time frequency of the run (size and type). For the type, use 'H' for hours, 'min' for minutes, 'S' for seconds, 'D' for days. For more info and other types, see here . The current model uses hourly (so 1 and 'h'). Changing that might require some adjustments in the code. display frequency The frequency of the displayed values can be different than the frequency of the compuatations. In the current version, this needs to be the same or less frequent than the computation frequencey above. extra_downloads This is to decide if you want to dowload some files (note that this concerns the currently inactive weather module). locations legs mix vehicle These parameters define the scenario's vehicle. If you want profiles for several vehicles, run separate scenarios. vehicle name This is the name of the vehicle, which will be checked to see if trips and locations are actually declared. trips mobility_module day_start_hour This parameter defines the start of the day for the scenario. It is chosen so that there are no movements during that hour number. It represents the shift from midnight, so a day start hour of 5 means that the day starts at hour 5 (i.e. 05.00). The idea is to choose an hour that is logical for the users/matches their patterns. This is connected to the day types , as a given day will correspond to a day type. For example, the hours between 00:00 and 05:00 on a Saturday belong to the Thursday before and are as such on a week day (as opposed to a weekend day). day_types trips_per_day_type For vehicles other than cars, we assume that there is one trip per day type. This is where we match the trips to their day type transport_factors road_types weights weather charging plots files maps colors color_bars unit_conversion time numbers","title":"The scenario file"},{"location":"scenario/#scenario-file-description","text":"This page describes the elements of the scenario file","title":"Scenario file description"},{"location":"scenario/#run","text":"Run parameters give the elements to produce the time tags of the run range.","title":"run"},{"location":"scenario/#use_day_types_in_charge_computing","text":"If set to true, the charging computations will be done per day type rather than for all days of the run, which fastens the computations.","title":"use_day_types_in_charge_computing"},{"location":"scenario/#start","text":"This part gives the year, month, day, hour, and minute of the start of the computations. It is best to set this to a day hour start for consistency and then cut off the start for display (see below). For example, start on 31/12/2019 at 05:00 if your day start hour is 05:00 and if you want to show results starting on 1/1/2020 at 00:00.","title":"start"},{"location":"scenario/#end","text":"This part gives the year, month, day, hour, and minute of the end of the computations. Note that the end time tag is not included in the run, so put 1/1/2021 at 00:00 if you want to compute for 2020.","title":"end"},{"location":"scenario/#display_start","text":"This is the first time tag you want to show in your end results.","title":"display_start"},{"location":"scenario/#display_end","text":"This is the first time tag that does not appear in your displayed results.","title":"display_end"},{"location":"scenario/#frequency","text":"The time frequency of the run (size and type). For the type, use 'H' for hours, 'min' for minutes, 'S' for seconds, 'D' for days. For more info and other types, see here . The current model uses hourly (so 1 and 'h'). Changing that might require some adjustments in the code.","title":"frequency"},{"location":"scenario/#display-frequency","text":"The frequency of the displayed values can be different than the frequency of the compuatations. In the current version, this needs to be the same or less frequent than the computation frequencey above.","title":"display frequency"},{"location":"scenario/#extra_downloads","text":"This is to decide if you want to dowload some files (note that this concerns the currently inactive weather module).","title":"extra_downloads"},{"location":"scenario/#locations","text":"","title":"locations"},{"location":"scenario/#legs","text":"","title":"legs"},{"location":"scenario/#mix","text":"","title":"mix"},{"location":"scenario/#vehicle","text":"These parameters define the scenario's vehicle. If you want profiles for several vehicles, run separate scenarios.","title":"vehicle"},{"location":"scenario/#vehicle-name","text":"This is the name of the vehicle, which will be checked to see if trips and locations are actually declared.","title":"vehicle name"},{"location":"scenario/#trips","text":"","title":"trips"},{"location":"scenario/#mobility_module","text":"","title":"mobility_module"},{"location":"scenario/#day_start_hour","text":"This parameter defines the start of the day for the scenario. It is chosen so that there are no movements during that hour number. It represents the shift from midnight, so a day start hour of 5 means that the day starts at hour 5 (i.e. 05.00). The idea is to choose an hour that is logical for the users/matches their patterns. This is connected to the day types , as a given day will correspond to a day type. For example, the hours between 00:00 and 05:00 on a Saturday belong to the Thursday before and are as such on a week day (as opposed to a weekend day).","title":"day_start_hour"},{"location":"scenario/#day_types","text":"","title":"day_types"},{"location":"scenario/#trips_per_day_type","text":"For vehicles other than cars, we assume that there is one trip per day type. This is where we match the trips to their day type","title":"trips_per_day_type"},{"location":"scenario/#transport_factors","text":"","title":"transport_factors"},{"location":"scenario/#road_types","text":"","title":"road_types"},{"location":"scenario/#weights","text":"","title":"weights"},{"location":"scenario/#weather","text":"","title":"weather"},{"location":"scenario/#charging","text":"","title":"charging"},{"location":"scenario/#plots","text":"","title":"plots"},{"location":"scenario/#files","text":"","title":"files"},{"location":"scenario/#maps","text":"","title":"maps"},{"location":"scenario/#colors","text":"","title":"colors"},{"location":"scenario/#color_bars","text":"","title":"color_bars"},{"location":"scenario/#unit_conversion","text":"","title":"unit_conversion"},{"location":"scenario/#time","text":"","title":"time"},{"location":"scenario/#numbers","text":"","title":"numbers"},{"location":"using/","text":"Installation pip install ChaProEV Running The standard way of running the model is to run a case with a code such as the following: from ChaProEV import ChaProEV if __name__ == '__main__': case_name: str = 'my_case' ChaProEV.run_ChaProEV(case_name) where you need to give a name to your case ('my_case') in the example above. To run your case, you need to provide general parameters, scenario parameters, variant parameters, and (optional) inputs. ## General parameters The file containing the general parameters (common for all acenarios) is in your root working folder as is called ChaProEV.toml (click on link for details). ## Scenarios ## Variants ## Inputs","title":"How to use"},{"location":"using/#installation","text":"pip install ChaProEV","title":"Installation"},{"location":"using/#running","text":"The standard way of running the model is to run a case with a code such as the following: from ChaProEV import ChaProEV if __name__ == '__main__': case_name: str = 'my_case' ChaProEV.run_ChaProEV(case_name) where you need to give a name to your case ('my_case') in the example above. To run your case, you need to provide general parameters, scenario parameters, variant parameters, and (optional) inputs. ## General parameters The file containing the general parameters (common for all acenarios) is in your root working folder as is called ChaProEV.toml (click on link for details). ## Scenarios ## Variants ## Inputs","title":"Running"},{"location":"variants/","text":"For more details, see the documentation of the make_variants.py code file","title":"Variants"},{"location":"weather/","text":"","title":"Weather"},{"location":"writing/","text":"","title":"Writing"}]}